// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Consultation {
  id_consultation  String @id @default(auto()) @map("_id") @db.ObjectId  
  date_consultation DateTime
  motif String
  status String

  // Une consultation appartient à un dentiste
  id_dentiste String? @db.ObjectId
  dentiste Dentiste? @relation(fields: [id_dentiste], references: [id_dentiste], onUpdate: Cascade, onDelete: Cascade)

  // Une consultation appartient à un patient
  id_patient String? @db.ObjectId
  patient Patient? @relation(fields: [id_patient], references: [id_patient], onUpdate: Cascade, onDelete: Cascade)
}

model Planification {
  id_planification  String @id @default(auto()) @map("_id") @db.ObjectId
  date_service DateTime
  heures_debut String
  heures_fin String 

  // Un Planification est attribuée à un dentiste
  id_dentiste String? @db.ObjectId
  dentiste Dentiste? @relation(fields: [id_dentiste], references: [id_dentiste])
}

model Dentiste {
  id_dentiste  String @id @default(auto()) @map("_id") @db.ObjectId
  nom_dentiste String
  prenom_dentiste String
  telephone String @unique
  email String @unique
  numIns   String @unique

  // Un dentiste s'occupe d'une ou plusieurs consultations
  consultations Consultation[]

  // Un dentiste a une ou plusieurs planifications
  planifications Planification[]

  // Un dentiste peut avoir un seul compte
  compte Compte? 
}

model Patient {
  id_patient  String @id @default(auto()) @map("_id") @db.ObjectId
  nom_patient String
  prenom_patient String
  age Int
  quartier String
  telephone String @unique

  // Un patient peut faire une ou plusieurs consultations
  consultations Consultation[]

  // Un patient peut avoir un compte
  compte_email String? @unique
  compte Compte? @relation(fields: [compte_email], references: [email], onUpdate: Cascade, onDelete: Cascade)
}

model Compte {
  id_compte  String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email String @unique
  clerkId String? @unique
  role Role? @default(PATIENT)

  // Un compte appartient à un dentiste
   numIns String? @unique
  dentiste Dentiste? @relation(fields: [numIns], references: [numIns])
  
  // Un compte appartient à un patient
  patient Patient? 

  // Un compte peut avoir aucune ou plusieurs notifications
  notifications Notification[]

  // Un compte peut avoir aucun ou plusieurs messages
  messages Message[]
}

enum Role {
  PATIENT
  DENTISTE_INTERVENANT
  DENTISTE
}  

model Message {
  id_message  String @id @default(auto()) @map("_id") @db.ObjectId
  contenu_message String
  date_message DateTime

  // Un message provient d'un compte
  id_compte String? @db.ObjectId
  compte Compte? @relation(fields: [id_compte], references: [id_compte], onUpdate: Cascade, onDelete: Cascade) 
}

model Notification {
  id_notification  String @id @default(auto()) @map("_id") @db.ObjectId
  contenu_notification String
  date_notification DateTime

  // Une notification appartient à un compte
  id_compte String? @db.ObjectId
  compte Compte? @relation(fields: [id_compte], references: [id_compte], onUpdate: Cascade, onDelete: Cascade)
}


