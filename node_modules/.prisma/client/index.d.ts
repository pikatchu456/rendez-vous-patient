
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Planification
 * 
 */
export type Planification = $Result.DefaultSelection<Prisma.$PlanificationPayload>
/**
 * Model Dentiste
 * 
 */
export type Dentiste = $Result.DefaultSelection<Prisma.$DentistePayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Compte
 * 
 */
export type Compte = $Result.DefaultSelection<Prisma.$ComptePayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Consultation
 * 
 */
export type Consultation = $Result.DefaultSelection<Prisma.$ConsultationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  PATIENT: 'PATIENT',
  DENTISTE_INTERVENANT: 'DENTISTE_INTERVENANT',
  DENTISTE: 'DENTISTE'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Planifications
 * const planifications = await prisma.planification.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Planifications
   * const planifications = await prisma.planification.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.planification`: Exposes CRUD operations for the **Planification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Planifications
    * const planifications = await prisma.planification.findMany()
    * ```
    */
  get planification(): Prisma.PlanificationDelegate<ExtArgs>;

  /**
   * `prisma.dentiste`: Exposes CRUD operations for the **Dentiste** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dentistes
    * const dentistes = await prisma.dentiste.findMany()
    * ```
    */
  get dentiste(): Prisma.DentisteDelegate<ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.compte`: Exposes CRUD operations for the **Compte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comptes
    * const comptes = await prisma.compte.findMany()
    * ```
    */
  get compte(): Prisma.CompteDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.consultation`: Exposes CRUD operations for the **Consultation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultations
    * const consultations = await prisma.consultation.findMany()
    * ```
    */
  get consultation(): Prisma.ConsultationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Planification: 'Planification',
    Dentiste: 'Dentiste',
    Patient: 'Patient',
    Compte: 'Compte',
    Message: 'Message',
    Notification: 'Notification',
    Consultation: 'Consultation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "planification" | "dentiste" | "patient" | "compte" | "message" | "notification" | "consultation"
      txIsolationLevel: never
    }
    model: {
      Planification: {
        payload: Prisma.$PlanificationPayload<ExtArgs>
        fields: Prisma.PlanificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>
          }
          findFirst: {
            args: Prisma.PlanificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>
          }
          findMany: {
            args: Prisma.PlanificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>[]
          }
          create: {
            args: Prisma.PlanificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>
          }
          createMany: {
            args: Prisma.PlanificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlanificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>
          }
          update: {
            args: Prisma.PlanificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>
          }
          deleteMany: {
            args: Prisma.PlanificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlanificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanificationPayload>
          }
          aggregate: {
            args: Prisma.PlanificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanification>
          }
          groupBy: {
            args: Prisma.PlanificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanificationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PlanificationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.PlanificationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.PlanificationCountArgs<ExtArgs>
            result: $Utils.Optional<PlanificationCountAggregateOutputType> | number
          }
        }
      }
      Dentiste: {
        payload: Prisma.$DentistePayload<ExtArgs>
        fields: Prisma.DentisteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DentisteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DentisteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>
          }
          findFirst: {
            args: Prisma.DentisteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DentisteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>
          }
          findMany: {
            args: Prisma.DentisteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>[]
          }
          create: {
            args: Prisma.DentisteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>
          }
          createMany: {
            args: Prisma.DentisteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DentisteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>
          }
          update: {
            args: Prisma.DentisteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>
          }
          deleteMany: {
            args: Prisma.DentisteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DentisteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DentisteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistePayload>
          }
          aggregate: {
            args: Prisma.DentisteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDentiste>
          }
          groupBy: {
            args: Prisma.DentisteGroupByArgs<ExtArgs>
            result: $Utils.Optional<DentisteGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DentisteFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.DentisteAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.DentisteCountArgs<ExtArgs>
            result: $Utils.Optional<DentisteCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PatientFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.PatientAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Compte: {
        payload: Prisma.$ComptePayload<ExtArgs>
        fields: Prisma.CompteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>
          }
          findFirst: {
            args: Prisma.CompteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>
          }
          findMany: {
            args: Prisma.CompteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>[]
          }
          create: {
            args: Prisma.CompteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>
          }
          createMany: {
            args: Prisma.CompteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CompteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>
          }
          update: {
            args: Prisma.CompteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>
          }
          deleteMany: {
            args: Prisma.CompteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComptePayload>
          }
          aggregate: {
            args: Prisma.CompteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompte>
          }
          groupBy: {
            args: Prisma.CompteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompteGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CompteFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CompteAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CompteCountArgs<ExtArgs>
            result: $Utils.Optional<CompteCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MessageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MessageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.NotificationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.NotificationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Consultation: {
        payload: Prisma.$ConsultationPayload<ExtArgs>
        fields: Prisma.ConsultationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          findFirst: {
            args: Prisma.ConsultationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          findMany: {
            args: Prisma.ConsultationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>[]
          }
          create: {
            args: Prisma.ConsultationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          createMany: {
            args: Prisma.ConsultationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConsultationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          update: {
            args: Prisma.ConsultationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          deleteMany: {
            args: Prisma.ConsultationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsultationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          aggregate: {
            args: Prisma.ConsultationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultation>
          }
          groupBy: {
            args: Prisma.ConsultationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ConsultationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ConsultationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ConsultationCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DentisteCountOutputType
   */

  export type DentisteCountOutputType = {
    consultations: number
    planifications: number
  }

  export type DentisteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | DentisteCountOutputTypeCountConsultationsArgs
    planifications?: boolean | DentisteCountOutputTypeCountPlanificationsArgs
  }

  // Custom InputTypes
  /**
   * DentisteCountOutputType without action
   */
  export type DentisteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentisteCountOutputType
     */
    select?: DentisteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DentisteCountOutputType without action
   */
  export type DentisteCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationWhereInput
  }

  /**
   * DentisteCountOutputType without action
   */
  export type DentisteCountOutputTypeCountPlanificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanificationWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    consultations: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | PatientCountOutputTypeCountConsultationsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationWhereInput
  }


  /**
   * Count Type CompteCountOutputType
   */

  export type CompteCountOutputType = {
    notifications: number
    messages: number
  }

  export type CompteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | CompteCountOutputTypeCountNotificationsArgs
    messages?: boolean | CompteCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * CompteCountOutputType without action
   */
  export type CompteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompteCountOutputType
     */
    select?: CompteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompteCountOutputType without action
   */
  export type CompteCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * CompteCountOutputType without action
   */
  export type CompteCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Planification
   */

  export type AggregatePlanification = {
    _count: PlanificationCountAggregateOutputType | null
    _min: PlanificationMinAggregateOutputType | null
    _max: PlanificationMaxAggregateOutputType | null
  }

  export type PlanificationMinAggregateOutputType = {
    id_planification: string | null
    date_service: Date | null
    heures_debut: string | null
    heures_fin: string | null
    id_dentiste: string | null
  }

  export type PlanificationMaxAggregateOutputType = {
    id_planification: string | null
    date_service: Date | null
    heures_debut: string | null
    heures_fin: string | null
    id_dentiste: string | null
  }

  export type PlanificationCountAggregateOutputType = {
    id_planification: number
    date_service: number
    heures_debut: number
    heures_fin: number
    id_dentiste: number
    _all: number
  }


  export type PlanificationMinAggregateInputType = {
    id_planification?: true
    date_service?: true
    heures_debut?: true
    heures_fin?: true
    id_dentiste?: true
  }

  export type PlanificationMaxAggregateInputType = {
    id_planification?: true
    date_service?: true
    heures_debut?: true
    heures_fin?: true
    id_dentiste?: true
  }

  export type PlanificationCountAggregateInputType = {
    id_planification?: true
    date_service?: true
    heures_debut?: true
    heures_fin?: true
    id_dentiste?: true
    _all?: true
  }

  export type PlanificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Planification to aggregate.
     */
    where?: PlanificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planifications to fetch.
     */
    orderBy?: PlanificationOrderByWithRelationInput | PlanificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Planifications
    **/
    _count?: true | PlanificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanificationMaxAggregateInputType
  }

  export type GetPlanificationAggregateType<T extends PlanificationAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanification[P]>
      : GetScalarType<T[P], AggregatePlanification[P]>
  }




  export type PlanificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanificationWhereInput
    orderBy?: PlanificationOrderByWithAggregationInput | PlanificationOrderByWithAggregationInput[]
    by: PlanificationScalarFieldEnum[] | PlanificationScalarFieldEnum
    having?: PlanificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanificationCountAggregateInputType | true
    _min?: PlanificationMinAggregateInputType
    _max?: PlanificationMaxAggregateInputType
  }

  export type PlanificationGroupByOutputType = {
    id_planification: string
    date_service: Date
    heures_debut: string
    heures_fin: string
    id_dentiste: string | null
    _count: PlanificationCountAggregateOutputType | null
    _min: PlanificationMinAggregateOutputType | null
    _max: PlanificationMaxAggregateOutputType | null
  }

  type GetPlanificationGroupByPayload<T extends PlanificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanificationGroupByOutputType[P]>
            : GetScalarType<T[P], PlanificationGroupByOutputType[P]>
        }
      >
    >


  export type PlanificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_planification?: boolean
    date_service?: boolean
    heures_debut?: boolean
    heures_fin?: boolean
    id_dentiste?: boolean
    dentiste?: boolean | Planification$dentisteArgs<ExtArgs>
  }, ExtArgs["result"]["planification"]>


  export type PlanificationSelectScalar = {
    id_planification?: boolean
    date_service?: boolean
    heures_debut?: boolean
    heures_fin?: boolean
    id_dentiste?: boolean
  }

  export type PlanificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dentiste?: boolean | Planification$dentisteArgs<ExtArgs>
  }

  export type $PlanificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Planification"
    objects: {
      dentiste: Prisma.$DentistePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_planification: string
      date_service: Date
      heures_debut: string
      heures_fin: string
      id_dentiste: string | null
    }, ExtArgs["result"]["planification"]>
    composites: {}
  }

  type PlanificationGetPayload<S extends boolean | null | undefined | PlanificationDefaultArgs> = $Result.GetResult<Prisma.$PlanificationPayload, S>

  type PlanificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanificationCountAggregateInputType | true
    }

  export interface PlanificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Planification'], meta: { name: 'Planification' } }
    /**
     * Find zero or one Planification that matches the filter.
     * @param {PlanificationFindUniqueArgs} args - Arguments to find a Planification
     * @example
     * // Get one Planification
     * const planification = await prisma.planification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanificationFindUniqueArgs>(args: SelectSubset<T, PlanificationFindUniqueArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Planification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanificationFindUniqueOrThrowArgs} args - Arguments to find a Planification
     * @example
     * // Get one Planification
     * const planification = await prisma.planification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanificationFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Planification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationFindFirstArgs} args - Arguments to find a Planification
     * @example
     * // Get one Planification
     * const planification = await prisma.planification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanificationFindFirstArgs>(args?: SelectSubset<T, PlanificationFindFirstArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Planification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationFindFirstOrThrowArgs} args - Arguments to find a Planification
     * @example
     * // Get one Planification
     * const planification = await prisma.planification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanificationFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Planifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Planifications
     * const planifications = await prisma.planification.findMany()
     * 
     * // Get first 10 Planifications
     * const planifications = await prisma.planification.findMany({ take: 10 })
     * 
     * // Only select the `id_planification`
     * const planificationWithId_planificationOnly = await prisma.planification.findMany({ select: { id_planification: true } })
     * 
     */
    findMany<T extends PlanificationFindManyArgs>(args?: SelectSubset<T, PlanificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Planification.
     * @param {PlanificationCreateArgs} args - Arguments to create a Planification.
     * @example
     * // Create one Planification
     * const Planification = await prisma.planification.create({
     *   data: {
     *     // ... data to create a Planification
     *   }
     * })
     * 
     */
    create<T extends PlanificationCreateArgs>(args: SelectSubset<T, PlanificationCreateArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Planifications.
     * @param {PlanificationCreateManyArgs} args - Arguments to create many Planifications.
     * @example
     * // Create many Planifications
     * const planification = await prisma.planification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanificationCreateManyArgs>(args?: SelectSubset<T, PlanificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Planification.
     * @param {PlanificationDeleteArgs} args - Arguments to delete one Planification.
     * @example
     * // Delete one Planification
     * const Planification = await prisma.planification.delete({
     *   where: {
     *     // ... filter to delete one Planification
     *   }
     * })
     * 
     */
    delete<T extends PlanificationDeleteArgs>(args: SelectSubset<T, PlanificationDeleteArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Planification.
     * @param {PlanificationUpdateArgs} args - Arguments to update one Planification.
     * @example
     * // Update one Planification
     * const planification = await prisma.planification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanificationUpdateArgs>(args: SelectSubset<T, PlanificationUpdateArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Planifications.
     * @param {PlanificationDeleteManyArgs} args - Arguments to filter Planifications to delete.
     * @example
     * // Delete a few Planifications
     * const { count } = await prisma.planification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanificationDeleteManyArgs>(args?: SelectSubset<T, PlanificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Planifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Planifications
     * const planification = await prisma.planification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanificationUpdateManyArgs>(args: SelectSubset<T, PlanificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Planification.
     * @param {PlanificationUpsertArgs} args - Arguments to update or create a Planification.
     * @example
     * // Update or create a Planification
     * const planification = await prisma.planification.upsert({
     *   create: {
     *     // ... data to create a Planification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Planification we want to update
     *   }
     * })
     */
    upsert<T extends PlanificationUpsertArgs>(args: SelectSubset<T, PlanificationUpsertArgs<ExtArgs>>): Prisma__PlanificationClient<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Planifications that matches the filter.
     * @param {PlanificationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const planification = await prisma.planification.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: PlanificationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Planification.
     * @param {PlanificationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const planification = await prisma.planification.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: PlanificationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Planifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationCountArgs} args - Arguments to filter Planifications to count.
     * @example
     * // Count the number of Planifications
     * const count = await prisma.planification.count({
     *   where: {
     *     // ... the filter for the Planifications we want to count
     *   }
     * })
    **/
    count<T extends PlanificationCountArgs>(
      args?: Subset<T, PlanificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Planification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanificationAggregateArgs>(args: Subset<T, PlanificationAggregateArgs>): Prisma.PrismaPromise<GetPlanificationAggregateType<T>>

    /**
     * Group by Planification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanificationGroupByArgs['orderBy'] }
        : { orderBy?: PlanificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Planification model
   */
  readonly fields: PlanificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Planification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dentiste<T extends Planification$dentisteArgs<ExtArgs> = {}>(args?: Subset<T, Planification$dentisteArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Planification model
   */ 
  interface PlanificationFieldRefs {
    readonly id_planification: FieldRef<"Planification", 'String'>
    readonly date_service: FieldRef<"Planification", 'DateTime'>
    readonly heures_debut: FieldRef<"Planification", 'String'>
    readonly heures_fin: FieldRef<"Planification", 'String'>
    readonly id_dentiste: FieldRef<"Planification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Planification findUnique
   */
  export type PlanificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * Filter, which Planification to fetch.
     */
    where: PlanificationWhereUniqueInput
  }

  /**
   * Planification findUniqueOrThrow
   */
  export type PlanificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * Filter, which Planification to fetch.
     */
    where: PlanificationWhereUniqueInput
  }

  /**
   * Planification findFirst
   */
  export type PlanificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * Filter, which Planification to fetch.
     */
    where?: PlanificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planifications to fetch.
     */
    orderBy?: PlanificationOrderByWithRelationInput | PlanificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planifications.
     */
    cursor?: PlanificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planifications.
     */
    distinct?: PlanificationScalarFieldEnum | PlanificationScalarFieldEnum[]
  }

  /**
   * Planification findFirstOrThrow
   */
  export type PlanificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * Filter, which Planification to fetch.
     */
    where?: PlanificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planifications to fetch.
     */
    orderBy?: PlanificationOrderByWithRelationInput | PlanificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planifications.
     */
    cursor?: PlanificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planifications.
     */
    distinct?: PlanificationScalarFieldEnum | PlanificationScalarFieldEnum[]
  }

  /**
   * Planification findMany
   */
  export type PlanificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * Filter, which Planifications to fetch.
     */
    where?: PlanificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planifications to fetch.
     */
    orderBy?: PlanificationOrderByWithRelationInput | PlanificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Planifications.
     */
    cursor?: PlanificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planifications.
     */
    skip?: number
    distinct?: PlanificationScalarFieldEnum | PlanificationScalarFieldEnum[]
  }

  /**
   * Planification create
   */
  export type PlanificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Planification.
     */
    data: XOR<PlanificationCreateInput, PlanificationUncheckedCreateInput>
  }

  /**
   * Planification createMany
   */
  export type PlanificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Planifications.
     */
    data: PlanificationCreateManyInput | PlanificationCreateManyInput[]
  }

  /**
   * Planification update
   */
  export type PlanificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Planification.
     */
    data: XOR<PlanificationUpdateInput, PlanificationUncheckedUpdateInput>
    /**
     * Choose, which Planification to update.
     */
    where: PlanificationWhereUniqueInput
  }

  /**
   * Planification updateMany
   */
  export type PlanificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Planifications.
     */
    data: XOR<PlanificationUpdateManyMutationInput, PlanificationUncheckedUpdateManyInput>
    /**
     * Filter which Planifications to update
     */
    where?: PlanificationWhereInput
  }

  /**
   * Planification upsert
   */
  export type PlanificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Planification to update in case it exists.
     */
    where: PlanificationWhereUniqueInput
    /**
     * In case the Planification found by the `where` argument doesn't exist, create a new Planification with this data.
     */
    create: XOR<PlanificationCreateInput, PlanificationUncheckedCreateInput>
    /**
     * In case the Planification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanificationUpdateInput, PlanificationUncheckedUpdateInput>
  }

  /**
   * Planification delete
   */
  export type PlanificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    /**
     * Filter which Planification to delete.
     */
    where: PlanificationWhereUniqueInput
  }

  /**
   * Planification deleteMany
   */
  export type PlanificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Planifications to delete
     */
    where?: PlanificationWhereInput
  }

  /**
   * Planification findRaw
   */
  export type PlanificationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Planification aggregateRaw
   */
  export type PlanificationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Planification.dentiste
   */
  export type Planification$dentisteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    where?: DentisteWhereInput
  }

  /**
   * Planification without action
   */
  export type PlanificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
  }


  /**
   * Model Dentiste
   */

  export type AggregateDentiste = {
    _count: DentisteCountAggregateOutputType | null
    _min: DentisteMinAggregateOutputType | null
    _max: DentisteMaxAggregateOutputType | null
  }

  export type DentisteMinAggregateOutputType = {
    id_dentiste: string | null
    nom_dentiste: string | null
    prenom_dentiste: string | null
    telephone: string | null
    email: string | null
    id_compte: string | null
  }

  export type DentisteMaxAggregateOutputType = {
    id_dentiste: string | null
    nom_dentiste: string | null
    prenom_dentiste: string | null
    telephone: string | null
    email: string | null
    id_compte: string | null
  }

  export type DentisteCountAggregateOutputType = {
    id_dentiste: number
    nom_dentiste: number
    prenom_dentiste: number
    telephone: number
    email: number
    id_compte: number
    _all: number
  }


  export type DentisteMinAggregateInputType = {
    id_dentiste?: true
    nom_dentiste?: true
    prenom_dentiste?: true
    telephone?: true
    email?: true
    id_compte?: true
  }

  export type DentisteMaxAggregateInputType = {
    id_dentiste?: true
    nom_dentiste?: true
    prenom_dentiste?: true
    telephone?: true
    email?: true
    id_compte?: true
  }

  export type DentisteCountAggregateInputType = {
    id_dentiste?: true
    nom_dentiste?: true
    prenom_dentiste?: true
    telephone?: true
    email?: true
    id_compte?: true
    _all?: true
  }

  export type DentisteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dentiste to aggregate.
     */
    where?: DentisteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dentistes to fetch.
     */
    orderBy?: DentisteOrderByWithRelationInput | DentisteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DentisteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dentistes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dentistes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dentistes
    **/
    _count?: true | DentisteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DentisteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DentisteMaxAggregateInputType
  }

  export type GetDentisteAggregateType<T extends DentisteAggregateArgs> = {
        [P in keyof T & keyof AggregateDentiste]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDentiste[P]>
      : GetScalarType<T[P], AggregateDentiste[P]>
  }




  export type DentisteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DentisteWhereInput
    orderBy?: DentisteOrderByWithAggregationInput | DentisteOrderByWithAggregationInput[]
    by: DentisteScalarFieldEnum[] | DentisteScalarFieldEnum
    having?: DentisteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DentisteCountAggregateInputType | true
    _min?: DentisteMinAggregateInputType
    _max?: DentisteMaxAggregateInputType
  }

  export type DentisteGroupByOutputType = {
    id_dentiste: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    id_compte: string | null
    _count: DentisteCountAggregateOutputType | null
    _min: DentisteMinAggregateOutputType | null
    _max: DentisteMaxAggregateOutputType | null
  }

  type GetDentisteGroupByPayload<T extends DentisteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DentisteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DentisteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DentisteGroupByOutputType[P]>
            : GetScalarType<T[P], DentisteGroupByOutputType[P]>
        }
      >
    >


  export type DentisteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_dentiste?: boolean
    nom_dentiste?: boolean
    prenom_dentiste?: boolean
    telephone?: boolean
    email?: boolean
    id_compte?: boolean
    consultations?: boolean | Dentiste$consultationsArgs<ExtArgs>
    planifications?: boolean | Dentiste$planificationsArgs<ExtArgs>
    compte?: boolean | Dentiste$compteArgs<ExtArgs>
    _count?: boolean | DentisteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dentiste"]>


  export type DentisteSelectScalar = {
    id_dentiste?: boolean
    nom_dentiste?: boolean
    prenom_dentiste?: boolean
    telephone?: boolean
    email?: boolean
    id_compte?: boolean
  }

  export type DentisteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | Dentiste$consultationsArgs<ExtArgs>
    planifications?: boolean | Dentiste$planificationsArgs<ExtArgs>
    compte?: boolean | Dentiste$compteArgs<ExtArgs>
    _count?: boolean | DentisteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DentistePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dentiste"
    objects: {
      consultations: Prisma.$ConsultationPayload<ExtArgs>[]
      planifications: Prisma.$PlanificationPayload<ExtArgs>[]
      compte: Prisma.$ComptePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_dentiste: string
      nom_dentiste: string
      prenom_dentiste: string
      telephone: string
      email: string
      id_compte: string | null
    }, ExtArgs["result"]["dentiste"]>
    composites: {}
  }

  type DentisteGetPayload<S extends boolean | null | undefined | DentisteDefaultArgs> = $Result.GetResult<Prisma.$DentistePayload, S>

  type DentisteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DentisteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DentisteCountAggregateInputType | true
    }

  export interface DentisteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dentiste'], meta: { name: 'Dentiste' } }
    /**
     * Find zero or one Dentiste that matches the filter.
     * @param {DentisteFindUniqueArgs} args - Arguments to find a Dentiste
     * @example
     * // Get one Dentiste
     * const dentiste = await prisma.dentiste.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DentisteFindUniqueArgs>(args: SelectSubset<T, DentisteFindUniqueArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Dentiste that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DentisteFindUniqueOrThrowArgs} args - Arguments to find a Dentiste
     * @example
     * // Get one Dentiste
     * const dentiste = await prisma.dentiste.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DentisteFindUniqueOrThrowArgs>(args: SelectSubset<T, DentisteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Dentiste that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteFindFirstArgs} args - Arguments to find a Dentiste
     * @example
     * // Get one Dentiste
     * const dentiste = await prisma.dentiste.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DentisteFindFirstArgs>(args?: SelectSubset<T, DentisteFindFirstArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Dentiste that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteFindFirstOrThrowArgs} args - Arguments to find a Dentiste
     * @example
     * // Get one Dentiste
     * const dentiste = await prisma.dentiste.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DentisteFindFirstOrThrowArgs>(args?: SelectSubset<T, DentisteFindFirstOrThrowArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Dentistes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dentistes
     * const dentistes = await prisma.dentiste.findMany()
     * 
     * // Get first 10 Dentistes
     * const dentistes = await prisma.dentiste.findMany({ take: 10 })
     * 
     * // Only select the `id_dentiste`
     * const dentisteWithId_dentisteOnly = await prisma.dentiste.findMany({ select: { id_dentiste: true } })
     * 
     */
    findMany<T extends DentisteFindManyArgs>(args?: SelectSubset<T, DentisteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Dentiste.
     * @param {DentisteCreateArgs} args - Arguments to create a Dentiste.
     * @example
     * // Create one Dentiste
     * const Dentiste = await prisma.dentiste.create({
     *   data: {
     *     // ... data to create a Dentiste
     *   }
     * })
     * 
     */
    create<T extends DentisteCreateArgs>(args: SelectSubset<T, DentisteCreateArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Dentistes.
     * @param {DentisteCreateManyArgs} args - Arguments to create many Dentistes.
     * @example
     * // Create many Dentistes
     * const dentiste = await prisma.dentiste.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DentisteCreateManyArgs>(args?: SelectSubset<T, DentisteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dentiste.
     * @param {DentisteDeleteArgs} args - Arguments to delete one Dentiste.
     * @example
     * // Delete one Dentiste
     * const Dentiste = await prisma.dentiste.delete({
     *   where: {
     *     // ... filter to delete one Dentiste
     *   }
     * })
     * 
     */
    delete<T extends DentisteDeleteArgs>(args: SelectSubset<T, DentisteDeleteArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Dentiste.
     * @param {DentisteUpdateArgs} args - Arguments to update one Dentiste.
     * @example
     * // Update one Dentiste
     * const dentiste = await prisma.dentiste.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DentisteUpdateArgs>(args: SelectSubset<T, DentisteUpdateArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Dentistes.
     * @param {DentisteDeleteManyArgs} args - Arguments to filter Dentistes to delete.
     * @example
     * // Delete a few Dentistes
     * const { count } = await prisma.dentiste.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DentisteDeleteManyArgs>(args?: SelectSubset<T, DentisteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dentistes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dentistes
     * const dentiste = await prisma.dentiste.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DentisteUpdateManyArgs>(args: SelectSubset<T, DentisteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dentiste.
     * @param {DentisteUpsertArgs} args - Arguments to update or create a Dentiste.
     * @example
     * // Update or create a Dentiste
     * const dentiste = await prisma.dentiste.upsert({
     *   create: {
     *     // ... data to create a Dentiste
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dentiste we want to update
     *   }
     * })
     */
    upsert<T extends DentisteUpsertArgs>(args: SelectSubset<T, DentisteUpsertArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Dentistes that matches the filter.
     * @param {DentisteFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const dentiste = await prisma.dentiste.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: DentisteFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Dentiste.
     * @param {DentisteAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const dentiste = await prisma.dentiste.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: DentisteAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Dentistes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteCountArgs} args - Arguments to filter Dentistes to count.
     * @example
     * // Count the number of Dentistes
     * const count = await prisma.dentiste.count({
     *   where: {
     *     // ... the filter for the Dentistes we want to count
     *   }
     * })
    **/
    count<T extends DentisteCountArgs>(
      args?: Subset<T, DentisteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DentisteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dentiste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DentisteAggregateArgs>(args: Subset<T, DentisteAggregateArgs>): Prisma.PrismaPromise<GetDentisteAggregateType<T>>

    /**
     * Group by Dentiste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentisteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DentisteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DentisteGroupByArgs['orderBy'] }
        : { orderBy?: DentisteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DentisteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDentisteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dentiste model
   */
  readonly fields: DentisteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dentiste.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DentisteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultations<T extends Dentiste$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, Dentiste$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findMany"> | Null>
    planifications<T extends Dentiste$planificationsArgs<ExtArgs> = {}>(args?: Subset<T, Dentiste$planificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanificationPayload<ExtArgs>, T, "findMany"> | Null>
    compte<T extends Dentiste$compteArgs<ExtArgs> = {}>(args?: Subset<T, Dentiste$compteArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dentiste model
   */ 
  interface DentisteFieldRefs {
    readonly id_dentiste: FieldRef<"Dentiste", 'String'>
    readonly nom_dentiste: FieldRef<"Dentiste", 'String'>
    readonly prenom_dentiste: FieldRef<"Dentiste", 'String'>
    readonly telephone: FieldRef<"Dentiste", 'String'>
    readonly email: FieldRef<"Dentiste", 'String'>
    readonly id_compte: FieldRef<"Dentiste", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dentiste findUnique
   */
  export type DentisteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * Filter, which Dentiste to fetch.
     */
    where: DentisteWhereUniqueInput
  }

  /**
   * Dentiste findUniqueOrThrow
   */
  export type DentisteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * Filter, which Dentiste to fetch.
     */
    where: DentisteWhereUniqueInput
  }

  /**
   * Dentiste findFirst
   */
  export type DentisteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * Filter, which Dentiste to fetch.
     */
    where?: DentisteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dentistes to fetch.
     */
    orderBy?: DentisteOrderByWithRelationInput | DentisteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dentistes.
     */
    cursor?: DentisteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dentistes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dentistes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dentistes.
     */
    distinct?: DentisteScalarFieldEnum | DentisteScalarFieldEnum[]
  }

  /**
   * Dentiste findFirstOrThrow
   */
  export type DentisteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * Filter, which Dentiste to fetch.
     */
    where?: DentisteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dentistes to fetch.
     */
    orderBy?: DentisteOrderByWithRelationInput | DentisteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dentistes.
     */
    cursor?: DentisteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dentistes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dentistes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dentistes.
     */
    distinct?: DentisteScalarFieldEnum | DentisteScalarFieldEnum[]
  }

  /**
   * Dentiste findMany
   */
  export type DentisteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * Filter, which Dentistes to fetch.
     */
    where?: DentisteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dentistes to fetch.
     */
    orderBy?: DentisteOrderByWithRelationInput | DentisteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dentistes.
     */
    cursor?: DentisteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dentistes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dentistes.
     */
    skip?: number
    distinct?: DentisteScalarFieldEnum | DentisteScalarFieldEnum[]
  }

  /**
   * Dentiste create
   */
  export type DentisteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * The data needed to create a Dentiste.
     */
    data: XOR<DentisteCreateInput, DentisteUncheckedCreateInput>
  }

  /**
   * Dentiste createMany
   */
  export type DentisteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dentistes.
     */
    data: DentisteCreateManyInput | DentisteCreateManyInput[]
  }

  /**
   * Dentiste update
   */
  export type DentisteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * The data needed to update a Dentiste.
     */
    data: XOR<DentisteUpdateInput, DentisteUncheckedUpdateInput>
    /**
     * Choose, which Dentiste to update.
     */
    where: DentisteWhereUniqueInput
  }

  /**
   * Dentiste updateMany
   */
  export type DentisteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dentistes.
     */
    data: XOR<DentisteUpdateManyMutationInput, DentisteUncheckedUpdateManyInput>
    /**
     * Filter which Dentistes to update
     */
    where?: DentisteWhereInput
  }

  /**
   * Dentiste upsert
   */
  export type DentisteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * The filter to search for the Dentiste to update in case it exists.
     */
    where: DentisteWhereUniqueInput
    /**
     * In case the Dentiste found by the `where` argument doesn't exist, create a new Dentiste with this data.
     */
    create: XOR<DentisteCreateInput, DentisteUncheckedCreateInput>
    /**
     * In case the Dentiste was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DentisteUpdateInput, DentisteUncheckedUpdateInput>
  }

  /**
   * Dentiste delete
   */
  export type DentisteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    /**
     * Filter which Dentiste to delete.
     */
    where: DentisteWhereUniqueInput
  }

  /**
   * Dentiste deleteMany
   */
  export type DentisteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dentistes to delete
     */
    where?: DentisteWhereInput
  }

  /**
   * Dentiste findRaw
   */
  export type DentisteFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dentiste aggregateRaw
   */
  export type DentisteAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dentiste.consultations
   */
  export type Dentiste$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    where?: ConsultationWhereInput
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    cursor?: ConsultationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Dentiste.planifications
   */
  export type Dentiste$planificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Planification
     */
    select?: PlanificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanificationInclude<ExtArgs> | null
    where?: PlanificationWhereInput
    orderBy?: PlanificationOrderByWithRelationInput | PlanificationOrderByWithRelationInput[]
    cursor?: PlanificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanificationScalarFieldEnum | PlanificationScalarFieldEnum[]
  }

  /**
   * Dentiste.compte
   */
  export type Dentiste$compteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    where?: CompteWhereInput
  }

  /**
   * Dentiste without action
   */
  export type DentisteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    age: number | null
  }

  export type PatientSumAggregateOutputType = {
    age: number | null
  }

  export type PatientMinAggregateOutputType = {
    id_patient: string | null
    nom_patient: string | null
    prenom_patient: string | null
    age: number | null
    quartier: string | null
    telephone: string | null
    compte_email: string | null
  }

  export type PatientMaxAggregateOutputType = {
    id_patient: string | null
    nom_patient: string | null
    prenom_patient: string | null
    age: number | null
    quartier: string | null
    telephone: string | null
    compte_email: string | null
  }

  export type PatientCountAggregateOutputType = {
    id_patient: number
    nom_patient: number
    prenom_patient: number
    age: number
    quartier: number
    telephone: number
    compte_email: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    age?: true
  }

  export type PatientSumAggregateInputType = {
    age?: true
  }

  export type PatientMinAggregateInputType = {
    id_patient?: true
    nom_patient?: true
    prenom_patient?: true
    age?: true
    quartier?: true
    telephone?: true
    compte_email?: true
  }

  export type PatientMaxAggregateInputType = {
    id_patient?: true
    nom_patient?: true
    prenom_patient?: true
    age?: true
    quartier?: true
    telephone?: true
    compte_email?: true
  }

  export type PatientCountAggregateInputType = {
    id_patient?: true
    nom_patient?: true
    prenom_patient?: true
    age?: true
    quartier?: true
    telephone?: true
    compte_email?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id_patient: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    compte_email: string | null
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_patient?: boolean
    nom_patient?: boolean
    prenom_patient?: boolean
    age?: boolean
    quartier?: boolean
    telephone?: boolean
    compte_email?: boolean
    consultations?: boolean | Patient$consultationsArgs<ExtArgs>
    compte?: boolean | Patient$compteArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>


  export type PatientSelectScalar = {
    id_patient?: boolean
    nom_patient?: boolean
    prenom_patient?: boolean
    age?: boolean
    quartier?: boolean
    telephone?: boolean
    compte_email?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | Patient$consultationsArgs<ExtArgs>
    compte?: boolean | Patient$compteArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      consultations: Prisma.$ConsultationPayload<ExtArgs>[]
      compte: Prisma.$ComptePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_patient: string
      nom_patient: string
      prenom_patient: string
      age: number
      quartier: string
      telephone: string
      compte_email: string | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id_patient`
     * const patientWithId_patientOnly = await prisma.patient.findMany({ select: { id_patient: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * @param {PatientFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const patient = await prisma.patient.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: PatientFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Patient.
     * @param {PatientAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const patient = await prisma.patient.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: PatientAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultations<T extends Patient$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findMany"> | Null>
    compte<T extends Patient$compteArgs<ExtArgs> = {}>(args?: Subset<T, Patient$compteArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id_patient: FieldRef<"Patient", 'String'>
    readonly nom_patient: FieldRef<"Patient", 'String'>
    readonly prenom_patient: FieldRef<"Patient", 'String'>
    readonly age: FieldRef<"Patient", 'Int'>
    readonly quartier: FieldRef<"Patient", 'String'>
    readonly telephone: FieldRef<"Patient", 'String'>
    readonly compte_email: FieldRef<"Patient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }

  /**
   * Patient findRaw
   */
  export type PatientFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Patient aggregateRaw
   */
  export type PatientAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Patient.consultations
   */
  export type Patient$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    where?: ConsultationWhereInput
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    cursor?: ConsultationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Patient.compte
   */
  export type Patient$compteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    where?: CompteWhereInput
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Compte
   */

  export type AggregateCompte = {
    _count: CompteCountAggregateOutputType | null
    _min: CompteMinAggregateOutputType | null
    _max: CompteMaxAggregateOutputType | null
  }

  export type CompteMinAggregateOutputType = {
    id_compte: string | null
    nom_utilisateur: string | null
    email: string | null
    clerkId: string | null
    role: $Enums.Role | null
  }

  export type CompteMaxAggregateOutputType = {
    id_compte: string | null
    nom_utilisateur: string | null
    email: string | null
    clerkId: string | null
    role: $Enums.Role | null
  }

  export type CompteCountAggregateOutputType = {
    id_compte: number
    nom_utilisateur: number
    email: number
    clerkId: number
    role: number
    _all: number
  }


  export type CompteMinAggregateInputType = {
    id_compte?: true
    nom_utilisateur?: true
    email?: true
    clerkId?: true
    role?: true
  }

  export type CompteMaxAggregateInputType = {
    id_compte?: true
    nom_utilisateur?: true
    email?: true
    clerkId?: true
    role?: true
  }

  export type CompteCountAggregateInputType = {
    id_compte?: true
    nom_utilisateur?: true
    email?: true
    clerkId?: true
    role?: true
    _all?: true
  }

  export type CompteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compte to aggregate.
     */
    where?: CompteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comptes to fetch.
     */
    orderBy?: CompteOrderByWithRelationInput | CompteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comptes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comptes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comptes
    **/
    _count?: true | CompteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompteMaxAggregateInputType
  }

  export type GetCompteAggregateType<T extends CompteAggregateArgs> = {
        [P in keyof T & keyof AggregateCompte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompte[P]>
      : GetScalarType<T[P], AggregateCompte[P]>
  }




  export type CompteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompteWhereInput
    orderBy?: CompteOrderByWithAggregationInput | CompteOrderByWithAggregationInput[]
    by: CompteScalarFieldEnum[] | CompteScalarFieldEnum
    having?: CompteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompteCountAggregateInputType | true
    _min?: CompteMinAggregateInputType
    _max?: CompteMaxAggregateInputType
  }

  export type CompteGroupByOutputType = {
    id_compte: string
    nom_utilisateur: string
    email: string
    clerkId: string | null
    role: $Enums.Role | null
    _count: CompteCountAggregateOutputType | null
    _min: CompteMinAggregateOutputType | null
    _max: CompteMaxAggregateOutputType | null
  }

  type GetCompteGroupByPayload<T extends CompteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompteGroupByOutputType[P]>
            : GetScalarType<T[P], CompteGroupByOutputType[P]>
        }
      >
    >


  export type CompteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_compte?: boolean
    nom_utilisateur?: boolean
    email?: boolean
    clerkId?: boolean
    role?: boolean
    dentiste?: boolean | Compte$dentisteArgs<ExtArgs>
    patient?: boolean | Compte$patientArgs<ExtArgs>
    notifications?: boolean | Compte$notificationsArgs<ExtArgs>
    messages?: boolean | Compte$messagesArgs<ExtArgs>
    _count?: boolean | CompteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compte"]>


  export type CompteSelectScalar = {
    id_compte?: boolean
    nom_utilisateur?: boolean
    email?: boolean
    clerkId?: boolean
    role?: boolean
  }

  export type CompteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dentiste?: boolean | Compte$dentisteArgs<ExtArgs>
    patient?: boolean | Compte$patientArgs<ExtArgs>
    notifications?: boolean | Compte$notificationsArgs<ExtArgs>
    messages?: boolean | Compte$messagesArgs<ExtArgs>
    _count?: boolean | CompteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ComptePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Compte"
    objects: {
      dentiste: Prisma.$DentistePayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs> | null
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_compte: string
      nom_utilisateur: string
      email: string
      clerkId: string | null
      role: $Enums.Role | null
    }, ExtArgs["result"]["compte"]>
    composites: {}
  }

  type CompteGetPayload<S extends boolean | null | undefined | CompteDefaultArgs> = $Result.GetResult<Prisma.$ComptePayload, S>

  type CompteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompteCountAggregateInputType | true
    }

  export interface CompteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Compte'], meta: { name: 'Compte' } }
    /**
     * Find zero or one Compte that matches the filter.
     * @param {CompteFindUniqueArgs} args - Arguments to find a Compte
     * @example
     * // Get one Compte
     * const compte = await prisma.compte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompteFindUniqueArgs>(args: SelectSubset<T, CompteFindUniqueArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Compte that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompteFindUniqueOrThrowArgs} args - Arguments to find a Compte
     * @example
     * // Get one Compte
     * const compte = await prisma.compte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompteFindUniqueOrThrowArgs>(args: SelectSubset<T, CompteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Compte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteFindFirstArgs} args - Arguments to find a Compte
     * @example
     * // Get one Compte
     * const compte = await prisma.compte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompteFindFirstArgs>(args?: SelectSubset<T, CompteFindFirstArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Compte that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteFindFirstOrThrowArgs} args - Arguments to find a Compte
     * @example
     * // Get one Compte
     * const compte = await prisma.compte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompteFindFirstOrThrowArgs>(args?: SelectSubset<T, CompteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comptes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comptes
     * const comptes = await prisma.compte.findMany()
     * 
     * // Get first 10 Comptes
     * const comptes = await prisma.compte.findMany({ take: 10 })
     * 
     * // Only select the `id_compte`
     * const compteWithId_compteOnly = await prisma.compte.findMany({ select: { id_compte: true } })
     * 
     */
    findMany<T extends CompteFindManyArgs>(args?: SelectSubset<T, CompteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Compte.
     * @param {CompteCreateArgs} args - Arguments to create a Compte.
     * @example
     * // Create one Compte
     * const Compte = await prisma.compte.create({
     *   data: {
     *     // ... data to create a Compte
     *   }
     * })
     * 
     */
    create<T extends CompteCreateArgs>(args: SelectSubset<T, CompteCreateArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comptes.
     * @param {CompteCreateManyArgs} args - Arguments to create many Comptes.
     * @example
     * // Create many Comptes
     * const compte = await prisma.compte.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompteCreateManyArgs>(args?: SelectSubset<T, CompteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Compte.
     * @param {CompteDeleteArgs} args - Arguments to delete one Compte.
     * @example
     * // Delete one Compte
     * const Compte = await prisma.compte.delete({
     *   where: {
     *     // ... filter to delete one Compte
     *   }
     * })
     * 
     */
    delete<T extends CompteDeleteArgs>(args: SelectSubset<T, CompteDeleteArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Compte.
     * @param {CompteUpdateArgs} args - Arguments to update one Compte.
     * @example
     * // Update one Compte
     * const compte = await prisma.compte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompteUpdateArgs>(args: SelectSubset<T, CompteUpdateArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comptes.
     * @param {CompteDeleteManyArgs} args - Arguments to filter Comptes to delete.
     * @example
     * // Delete a few Comptes
     * const { count } = await prisma.compte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompteDeleteManyArgs>(args?: SelectSubset<T, CompteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comptes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comptes
     * const compte = await prisma.compte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompteUpdateManyArgs>(args: SelectSubset<T, CompteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compte.
     * @param {CompteUpsertArgs} args - Arguments to update or create a Compte.
     * @example
     * // Update or create a Compte
     * const compte = await prisma.compte.upsert({
     *   create: {
     *     // ... data to create a Compte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compte we want to update
     *   }
     * })
     */
    upsert<T extends CompteUpsertArgs>(args: SelectSubset<T, CompteUpsertArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Comptes that matches the filter.
     * @param {CompteFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const compte = await prisma.compte.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CompteFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Compte.
     * @param {CompteAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const compte = await prisma.compte.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CompteAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Comptes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteCountArgs} args - Arguments to filter Comptes to count.
     * @example
     * // Count the number of Comptes
     * const count = await prisma.compte.count({
     *   where: {
     *     // ... the filter for the Comptes we want to count
     *   }
     * })
    **/
    count<T extends CompteCountArgs>(
      args?: Subset<T, CompteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompteAggregateArgs>(args: Subset<T, CompteAggregateArgs>): Prisma.PrismaPromise<GetCompteAggregateType<T>>

    /**
     * Group by Compte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompteGroupByArgs['orderBy'] }
        : { orderBy?: CompteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Compte model
   */
  readonly fields: CompteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Compte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dentiste<T extends Compte$dentisteArgs<ExtArgs> = {}>(args?: Subset<T, Compte$dentisteArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patient<T extends Compte$patientArgs<ExtArgs> = {}>(args?: Subset<T, Compte$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    notifications<T extends Compte$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Compte$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends Compte$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Compte$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Compte model
   */ 
  interface CompteFieldRefs {
    readonly id_compte: FieldRef<"Compte", 'String'>
    readonly nom_utilisateur: FieldRef<"Compte", 'String'>
    readonly email: FieldRef<"Compte", 'String'>
    readonly clerkId: FieldRef<"Compte", 'String'>
    readonly role: FieldRef<"Compte", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * Compte findUnique
   */
  export type CompteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * Filter, which Compte to fetch.
     */
    where: CompteWhereUniqueInput
  }

  /**
   * Compte findUniqueOrThrow
   */
  export type CompteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * Filter, which Compte to fetch.
     */
    where: CompteWhereUniqueInput
  }

  /**
   * Compte findFirst
   */
  export type CompteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * Filter, which Compte to fetch.
     */
    where?: CompteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comptes to fetch.
     */
    orderBy?: CompteOrderByWithRelationInput | CompteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comptes.
     */
    cursor?: CompteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comptes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comptes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comptes.
     */
    distinct?: CompteScalarFieldEnum | CompteScalarFieldEnum[]
  }

  /**
   * Compte findFirstOrThrow
   */
  export type CompteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * Filter, which Compte to fetch.
     */
    where?: CompteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comptes to fetch.
     */
    orderBy?: CompteOrderByWithRelationInput | CompteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comptes.
     */
    cursor?: CompteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comptes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comptes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comptes.
     */
    distinct?: CompteScalarFieldEnum | CompteScalarFieldEnum[]
  }

  /**
   * Compte findMany
   */
  export type CompteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * Filter, which Comptes to fetch.
     */
    where?: CompteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comptes to fetch.
     */
    orderBy?: CompteOrderByWithRelationInput | CompteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comptes.
     */
    cursor?: CompteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comptes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comptes.
     */
    skip?: number
    distinct?: CompteScalarFieldEnum | CompteScalarFieldEnum[]
  }

  /**
   * Compte create
   */
  export type CompteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * The data needed to create a Compte.
     */
    data: XOR<CompteCreateInput, CompteUncheckedCreateInput>
  }

  /**
   * Compte createMany
   */
  export type CompteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comptes.
     */
    data: CompteCreateManyInput | CompteCreateManyInput[]
  }

  /**
   * Compte update
   */
  export type CompteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * The data needed to update a Compte.
     */
    data: XOR<CompteUpdateInput, CompteUncheckedUpdateInput>
    /**
     * Choose, which Compte to update.
     */
    where: CompteWhereUniqueInput
  }

  /**
   * Compte updateMany
   */
  export type CompteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comptes.
     */
    data: XOR<CompteUpdateManyMutationInput, CompteUncheckedUpdateManyInput>
    /**
     * Filter which Comptes to update
     */
    where?: CompteWhereInput
  }

  /**
   * Compte upsert
   */
  export type CompteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * The filter to search for the Compte to update in case it exists.
     */
    where: CompteWhereUniqueInput
    /**
     * In case the Compte found by the `where` argument doesn't exist, create a new Compte with this data.
     */
    create: XOR<CompteCreateInput, CompteUncheckedCreateInput>
    /**
     * In case the Compte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompteUpdateInput, CompteUncheckedUpdateInput>
  }

  /**
   * Compte delete
   */
  export type CompteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    /**
     * Filter which Compte to delete.
     */
    where: CompteWhereUniqueInput
  }

  /**
   * Compte deleteMany
   */
  export type CompteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comptes to delete
     */
    where?: CompteWhereInput
  }

  /**
   * Compte findRaw
   */
  export type CompteFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Compte aggregateRaw
   */
  export type CompteAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Compte.dentiste
   */
  export type Compte$dentisteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    where?: DentisteWhereInput
  }

  /**
   * Compte.patient
   */
  export type Compte$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * Compte.notifications
   */
  export type Compte$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Compte.messages
   */
  export type Compte$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Compte without action
   */
  export type CompteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id_message: string | null
    contenu_message: string | null
    date_message: Date | null
    id_compte: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id_message: string | null
    contenu_message: string | null
    date_message: Date | null
    id_compte: string | null
  }

  export type MessageCountAggregateOutputType = {
    id_message: number
    contenu_message: number
    date_message: number
    id_compte: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id_message?: true
    contenu_message?: true
    date_message?: true
    id_compte?: true
  }

  export type MessageMaxAggregateInputType = {
    id_message?: true
    contenu_message?: true
    date_message?: true
    id_compte?: true
  }

  export type MessageCountAggregateInputType = {
    id_message?: true
    contenu_message?: true
    date_message?: true
    id_compte?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id_message: string
    contenu_message: string
    date_message: Date
    id_compte: string | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_message?: boolean
    contenu_message?: boolean
    date_message?: boolean
    id_compte?: boolean
    compte?: boolean | Message$compteArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>


  export type MessageSelectScalar = {
    id_message?: boolean
    contenu_message?: boolean
    date_message?: boolean
    id_compte?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compte?: boolean | Message$compteArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      compte: Prisma.$ComptePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_message: string
      contenu_message: string
      date_message: Date
      id_compte: string | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id_message`
     * const messageWithId_messageOnly = await prisma.message.findMany({ select: { id_message: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * @param {MessageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const message = await prisma.message.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: MessageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Message.
     * @param {MessageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const message = await prisma.message.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MessageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    compte<T extends Message$compteArgs<ExtArgs> = {}>(args?: Subset<T, Message$compteArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id_message: FieldRef<"Message", 'String'>
    readonly contenu_message: FieldRef<"Message", 'String'>
    readonly date_message: FieldRef<"Message", 'DateTime'>
    readonly id_compte: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message findRaw
   */
  export type MessageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Message aggregateRaw
   */
  export type MessageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Message.compte
   */
  export type Message$compteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    where?: CompteWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id_notification: string | null
    contenu_notification: string | null
    date_notification: Date | null
    id_compte: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id_notification: string | null
    contenu_notification: string | null
    date_notification: Date | null
    id_compte: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id_notification: number
    contenu_notification: number
    date_notification: number
    id_compte: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id_notification?: true
    contenu_notification?: true
    date_notification?: true
    id_compte?: true
  }

  export type NotificationMaxAggregateInputType = {
    id_notification?: true
    contenu_notification?: true
    date_notification?: true
    id_compte?: true
  }

  export type NotificationCountAggregateInputType = {
    id_notification?: true
    contenu_notification?: true
    date_notification?: true
    id_compte?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id_notification: string
    contenu_notification: string
    date_notification: Date
    id_compte: string | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_notification?: boolean
    contenu_notification?: boolean
    date_notification?: boolean
    id_compte?: boolean
    compte?: boolean | Notification$compteArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id_notification?: boolean
    contenu_notification?: boolean
    date_notification?: boolean
    id_compte?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compte?: boolean | Notification$compteArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      compte: Prisma.$ComptePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_notification: string
      contenu_notification: string
      date_notification: Date
      id_compte: string | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id_notification`
     * const notificationWithId_notificationOnly = await prisma.notification.findMany({ select: { id_notification: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * @param {NotificationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const notification = await prisma.notification.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: NotificationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Notification.
     * @param {NotificationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const notification = await prisma.notification.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: NotificationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    compte<T extends Notification$compteArgs<ExtArgs> = {}>(args?: Subset<T, Notification$compteArgs<ExtArgs>>): Prisma__CompteClient<$Result.GetResult<Prisma.$ComptePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id_notification: FieldRef<"Notification", 'String'>
    readonly contenu_notification: FieldRef<"Notification", 'String'>
    readonly date_notification: FieldRef<"Notification", 'DateTime'>
    readonly id_compte: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification findRaw
   */
  export type NotificationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Notification aggregateRaw
   */
  export type NotificationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Notification.compte
   */
  export type Notification$compteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compte
     */
    select?: CompteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompteInclude<ExtArgs> | null
    where?: CompteWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Consultation
   */

  export type AggregateConsultation = {
    _count: ConsultationCountAggregateOutputType | null
    _min: ConsultationMinAggregateOutputType | null
    _max: ConsultationMaxAggregateOutputType | null
  }

  export type ConsultationMinAggregateOutputType = {
    id_consultation: string | null
    date_consultation: Date | null
    motif: string | null
    status: string | null
    id_dentiste: string | null
    id_patient: string | null
  }

  export type ConsultationMaxAggregateOutputType = {
    id_consultation: string | null
    date_consultation: Date | null
    motif: string | null
    status: string | null
    id_dentiste: string | null
    id_patient: string | null
  }

  export type ConsultationCountAggregateOutputType = {
    id_consultation: number
    date_consultation: number
    motif: number
    status: number
    id_dentiste: number
    id_patient: number
    _all: number
  }


  export type ConsultationMinAggregateInputType = {
    id_consultation?: true
    date_consultation?: true
    motif?: true
    status?: true
    id_dentiste?: true
    id_patient?: true
  }

  export type ConsultationMaxAggregateInputType = {
    id_consultation?: true
    date_consultation?: true
    motif?: true
    status?: true
    id_dentiste?: true
    id_patient?: true
  }

  export type ConsultationCountAggregateInputType = {
    id_consultation?: true
    date_consultation?: true
    motif?: true
    status?: true
    id_dentiste?: true
    id_patient?: true
    _all?: true
  }

  export type ConsultationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultation to aggregate.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultations
    **/
    _count?: true | ConsultationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultationMaxAggregateInputType
  }

  export type GetConsultationAggregateType<T extends ConsultationAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultation[P]>
      : GetScalarType<T[P], AggregateConsultation[P]>
  }




  export type ConsultationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationWhereInput
    orderBy?: ConsultationOrderByWithAggregationInput | ConsultationOrderByWithAggregationInput[]
    by: ConsultationScalarFieldEnum[] | ConsultationScalarFieldEnum
    having?: ConsultationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultationCountAggregateInputType | true
    _min?: ConsultationMinAggregateInputType
    _max?: ConsultationMaxAggregateInputType
  }

  export type ConsultationGroupByOutputType = {
    id_consultation: string
    date_consultation: Date
    motif: string
    status: string
    id_dentiste: string | null
    id_patient: string | null
    _count: ConsultationCountAggregateOutputType | null
    _min: ConsultationMinAggregateOutputType | null
    _max: ConsultationMaxAggregateOutputType | null
  }

  type GetConsultationGroupByPayload<T extends ConsultationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultationGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultationGroupByOutputType[P]>
        }
      >
    >


  export type ConsultationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_consultation?: boolean
    date_consultation?: boolean
    motif?: boolean
    status?: boolean
    id_dentiste?: boolean
    id_patient?: boolean
    dentiste?: boolean | Consultation$dentisteArgs<ExtArgs>
    patient?: boolean | Consultation$patientArgs<ExtArgs>
  }, ExtArgs["result"]["consultation"]>


  export type ConsultationSelectScalar = {
    id_consultation?: boolean
    date_consultation?: boolean
    motif?: boolean
    status?: boolean
    id_dentiste?: boolean
    id_patient?: boolean
  }

  export type ConsultationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dentiste?: boolean | Consultation$dentisteArgs<ExtArgs>
    patient?: boolean | Consultation$patientArgs<ExtArgs>
  }

  export type $ConsultationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultation"
    objects: {
      dentiste: Prisma.$DentistePayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_consultation: string
      date_consultation: Date
      motif: string
      status: string
      id_dentiste: string | null
      id_patient: string | null
    }, ExtArgs["result"]["consultation"]>
    composites: {}
  }

  type ConsultationGetPayload<S extends boolean | null | undefined | ConsultationDefaultArgs> = $Result.GetResult<Prisma.$ConsultationPayload, S>

  type ConsultationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsultationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsultationCountAggregateInputType | true
    }

  export interface ConsultationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultation'], meta: { name: 'Consultation' } }
    /**
     * Find zero or one Consultation that matches the filter.
     * @param {ConsultationFindUniqueArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultationFindUniqueArgs>(args: SelectSubset<T, ConsultationFindUniqueArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Consultation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsultationFindUniqueOrThrowArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Consultation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationFindFirstArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultationFindFirstArgs>(args?: SelectSubset<T, ConsultationFindFirstArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Consultation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationFindFirstOrThrowArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Consultations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultations
     * const consultations = await prisma.consultation.findMany()
     * 
     * // Get first 10 Consultations
     * const consultations = await prisma.consultation.findMany({ take: 10 })
     * 
     * // Only select the `id_consultation`
     * const consultationWithId_consultationOnly = await prisma.consultation.findMany({ select: { id_consultation: true } })
     * 
     */
    findMany<T extends ConsultationFindManyArgs>(args?: SelectSubset<T, ConsultationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Consultation.
     * @param {ConsultationCreateArgs} args - Arguments to create a Consultation.
     * @example
     * // Create one Consultation
     * const Consultation = await prisma.consultation.create({
     *   data: {
     *     // ... data to create a Consultation
     *   }
     * })
     * 
     */
    create<T extends ConsultationCreateArgs>(args: SelectSubset<T, ConsultationCreateArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Consultations.
     * @param {ConsultationCreateManyArgs} args - Arguments to create many Consultations.
     * @example
     * // Create many Consultations
     * const consultation = await prisma.consultation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultationCreateManyArgs>(args?: SelectSubset<T, ConsultationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Consultation.
     * @param {ConsultationDeleteArgs} args - Arguments to delete one Consultation.
     * @example
     * // Delete one Consultation
     * const Consultation = await prisma.consultation.delete({
     *   where: {
     *     // ... filter to delete one Consultation
     *   }
     * })
     * 
     */
    delete<T extends ConsultationDeleteArgs>(args: SelectSubset<T, ConsultationDeleteArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Consultation.
     * @param {ConsultationUpdateArgs} args - Arguments to update one Consultation.
     * @example
     * // Update one Consultation
     * const consultation = await prisma.consultation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultationUpdateArgs>(args: SelectSubset<T, ConsultationUpdateArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Consultations.
     * @param {ConsultationDeleteManyArgs} args - Arguments to filter Consultations to delete.
     * @example
     * // Delete a few Consultations
     * const { count } = await prisma.consultation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultationDeleteManyArgs>(args?: SelectSubset<T, ConsultationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultations
     * const consultation = await prisma.consultation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultationUpdateManyArgs>(args: SelectSubset<T, ConsultationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consultation.
     * @param {ConsultationUpsertArgs} args - Arguments to update or create a Consultation.
     * @example
     * // Update or create a Consultation
     * const consultation = await prisma.consultation.upsert({
     *   create: {
     *     // ... data to create a Consultation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultation we want to update
     *   }
     * })
     */
    upsert<T extends ConsultationUpsertArgs>(args: SelectSubset<T, ConsultationUpsertArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Consultations that matches the filter.
     * @param {ConsultationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const consultation = await prisma.consultation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ConsultationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Consultation.
     * @param {ConsultationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const consultation = await prisma.consultation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ConsultationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationCountArgs} args - Arguments to filter Consultations to count.
     * @example
     * // Count the number of Consultations
     * const count = await prisma.consultation.count({
     *   where: {
     *     // ... the filter for the Consultations we want to count
     *   }
     * })
    **/
    count<T extends ConsultationCountArgs>(
      args?: Subset<T, ConsultationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultationAggregateArgs>(args: Subset<T, ConsultationAggregateArgs>): Prisma.PrismaPromise<GetConsultationAggregateType<T>>

    /**
     * Group by Consultation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultationGroupByArgs['orderBy'] }
        : { orderBy?: ConsultationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultation model
   */
  readonly fields: ConsultationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dentiste<T extends Consultation$dentisteArgs<ExtArgs> = {}>(args?: Subset<T, Consultation$dentisteArgs<ExtArgs>>): Prisma__DentisteClient<$Result.GetResult<Prisma.$DentistePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patient<T extends Consultation$patientArgs<ExtArgs> = {}>(args?: Subset<T, Consultation$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultation model
   */ 
  interface ConsultationFieldRefs {
    readonly id_consultation: FieldRef<"Consultation", 'String'>
    readonly date_consultation: FieldRef<"Consultation", 'DateTime'>
    readonly motif: FieldRef<"Consultation", 'String'>
    readonly status: FieldRef<"Consultation", 'String'>
    readonly id_dentiste: FieldRef<"Consultation", 'String'>
    readonly id_patient: FieldRef<"Consultation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Consultation findUnique
   */
  export type ConsultationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation findUniqueOrThrow
   */
  export type ConsultationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation findFirst
   */
  export type ConsultationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultations.
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultations.
     */
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Consultation findFirstOrThrow
   */
  export type ConsultationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultations.
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultations.
     */
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Consultation findMany
   */
  export type ConsultationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultations.
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Consultation create
   */
  export type ConsultationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultation.
     */
    data: XOR<ConsultationCreateInput, ConsultationUncheckedCreateInput>
  }

  /**
   * Consultation createMany
   */
  export type ConsultationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultations.
     */
    data: ConsultationCreateManyInput | ConsultationCreateManyInput[]
  }

  /**
   * Consultation update
   */
  export type ConsultationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultation.
     */
    data: XOR<ConsultationUpdateInput, ConsultationUncheckedUpdateInput>
    /**
     * Choose, which Consultation to update.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation updateMany
   */
  export type ConsultationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultations.
     */
    data: XOR<ConsultationUpdateManyMutationInput, ConsultationUncheckedUpdateManyInput>
    /**
     * Filter which Consultations to update
     */
    where?: ConsultationWhereInput
  }

  /**
   * Consultation upsert
   */
  export type ConsultationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultation to update in case it exists.
     */
    where: ConsultationWhereUniqueInput
    /**
     * In case the Consultation found by the `where` argument doesn't exist, create a new Consultation with this data.
     */
    create: XOR<ConsultationCreateInput, ConsultationUncheckedCreateInput>
    /**
     * In case the Consultation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultationUpdateInput, ConsultationUncheckedUpdateInput>
  }

  /**
   * Consultation delete
   */
  export type ConsultationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter which Consultation to delete.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation deleteMany
   */
  export type ConsultationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultations to delete
     */
    where?: ConsultationWhereInput
  }

  /**
   * Consultation findRaw
   */
  export type ConsultationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Consultation aggregateRaw
   */
  export type ConsultationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Consultation.dentiste
   */
  export type Consultation$dentisteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dentiste
     */
    select?: DentisteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentisteInclude<ExtArgs> | null
    where?: DentisteWhereInput
  }

  /**
   * Consultation.patient
   */
  export type Consultation$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * Consultation without action
   */
  export type ConsultationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const PlanificationScalarFieldEnum: {
    id_planification: 'id_planification',
    date_service: 'date_service',
    heures_debut: 'heures_debut',
    heures_fin: 'heures_fin',
    id_dentiste: 'id_dentiste'
  };

  export type PlanificationScalarFieldEnum = (typeof PlanificationScalarFieldEnum)[keyof typeof PlanificationScalarFieldEnum]


  export const DentisteScalarFieldEnum: {
    id_dentiste: 'id_dentiste',
    nom_dentiste: 'nom_dentiste',
    prenom_dentiste: 'prenom_dentiste',
    telephone: 'telephone',
    email: 'email',
    id_compte: 'id_compte'
  };

  export type DentisteScalarFieldEnum = (typeof DentisteScalarFieldEnum)[keyof typeof DentisteScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id_patient: 'id_patient',
    nom_patient: 'nom_patient',
    prenom_patient: 'prenom_patient',
    age: 'age',
    quartier: 'quartier',
    telephone: 'telephone',
    compte_email: 'compte_email'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const CompteScalarFieldEnum: {
    id_compte: 'id_compte',
    nom_utilisateur: 'nom_utilisateur',
    email: 'email',
    clerkId: 'clerkId',
    role: 'role'
  };

  export type CompteScalarFieldEnum = (typeof CompteScalarFieldEnum)[keyof typeof CompteScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id_message: 'id_message',
    contenu_message: 'contenu_message',
    date_message: 'date_message',
    id_compte: 'id_compte'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id_notification: 'id_notification',
    contenu_notification: 'contenu_notification',
    date_notification: 'date_notification',
    id_compte: 'id_compte'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ConsultationScalarFieldEnum: {
    id_consultation: 'id_consultation',
    date_consultation: 'date_consultation',
    motif: 'motif',
    status: 'status',
    id_dentiste: 'id_dentiste',
    id_patient: 'id_patient'
  };

  export type ConsultationScalarFieldEnum = (typeof ConsultationScalarFieldEnum)[keyof typeof ConsultationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PlanificationWhereInput = {
    AND?: PlanificationWhereInput | PlanificationWhereInput[]
    OR?: PlanificationWhereInput[]
    NOT?: PlanificationWhereInput | PlanificationWhereInput[]
    id_planification?: StringFilter<"Planification"> | string
    date_service?: DateTimeFilter<"Planification"> | Date | string
    heures_debut?: StringFilter<"Planification"> | string
    heures_fin?: StringFilter<"Planification"> | string
    id_dentiste?: StringNullableFilter<"Planification"> | string | null
    dentiste?: XOR<DentisteNullableRelationFilter, DentisteWhereInput> | null
  }

  export type PlanificationOrderByWithRelationInput = {
    id_planification?: SortOrder
    date_service?: SortOrder
    heures_debut?: SortOrder
    heures_fin?: SortOrder
    id_dentiste?: SortOrder
    dentiste?: DentisteOrderByWithRelationInput
  }

  export type PlanificationWhereUniqueInput = Prisma.AtLeast<{
    id_planification?: string
    AND?: PlanificationWhereInput | PlanificationWhereInput[]
    OR?: PlanificationWhereInput[]
    NOT?: PlanificationWhereInput | PlanificationWhereInput[]
    date_service?: DateTimeFilter<"Planification"> | Date | string
    heures_debut?: StringFilter<"Planification"> | string
    heures_fin?: StringFilter<"Planification"> | string
    id_dentiste?: StringNullableFilter<"Planification"> | string | null
    dentiste?: XOR<DentisteNullableRelationFilter, DentisteWhereInput> | null
  }, "id_planification">

  export type PlanificationOrderByWithAggregationInput = {
    id_planification?: SortOrder
    date_service?: SortOrder
    heures_debut?: SortOrder
    heures_fin?: SortOrder
    id_dentiste?: SortOrder
    _count?: PlanificationCountOrderByAggregateInput
    _max?: PlanificationMaxOrderByAggregateInput
    _min?: PlanificationMinOrderByAggregateInput
  }

  export type PlanificationScalarWhereWithAggregatesInput = {
    AND?: PlanificationScalarWhereWithAggregatesInput | PlanificationScalarWhereWithAggregatesInput[]
    OR?: PlanificationScalarWhereWithAggregatesInput[]
    NOT?: PlanificationScalarWhereWithAggregatesInput | PlanificationScalarWhereWithAggregatesInput[]
    id_planification?: StringWithAggregatesFilter<"Planification"> | string
    date_service?: DateTimeWithAggregatesFilter<"Planification"> | Date | string
    heures_debut?: StringWithAggregatesFilter<"Planification"> | string
    heures_fin?: StringWithAggregatesFilter<"Planification"> | string
    id_dentiste?: StringNullableWithAggregatesFilter<"Planification"> | string | null
  }

  export type DentisteWhereInput = {
    AND?: DentisteWhereInput | DentisteWhereInput[]
    OR?: DentisteWhereInput[]
    NOT?: DentisteWhereInput | DentisteWhereInput[]
    id_dentiste?: StringFilter<"Dentiste"> | string
    nom_dentiste?: StringFilter<"Dentiste"> | string
    prenom_dentiste?: StringFilter<"Dentiste"> | string
    telephone?: StringFilter<"Dentiste"> | string
    email?: StringFilter<"Dentiste"> | string
    id_compte?: StringNullableFilter<"Dentiste"> | string | null
    consultations?: ConsultationListRelationFilter
    planifications?: PlanificationListRelationFilter
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }

  export type DentisteOrderByWithRelationInput = {
    id_dentiste?: SortOrder
    nom_dentiste?: SortOrder
    prenom_dentiste?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    id_compte?: SortOrder
    consultations?: ConsultationOrderByRelationAggregateInput
    planifications?: PlanificationOrderByRelationAggregateInput
    compte?: CompteOrderByWithRelationInput
  }

  export type DentisteWhereUniqueInput = Prisma.AtLeast<{
    id_dentiste?: string
    telephone?: string
    email?: string
    id_compte?: string
    AND?: DentisteWhereInput | DentisteWhereInput[]
    OR?: DentisteWhereInput[]
    NOT?: DentisteWhereInput | DentisteWhereInput[]
    nom_dentiste?: StringFilter<"Dentiste"> | string
    prenom_dentiste?: StringFilter<"Dentiste"> | string
    consultations?: ConsultationListRelationFilter
    planifications?: PlanificationListRelationFilter
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }, "id_dentiste" | "telephone" | "email" | "id_compte">

  export type DentisteOrderByWithAggregationInput = {
    id_dentiste?: SortOrder
    nom_dentiste?: SortOrder
    prenom_dentiste?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    id_compte?: SortOrder
    _count?: DentisteCountOrderByAggregateInput
    _max?: DentisteMaxOrderByAggregateInput
    _min?: DentisteMinOrderByAggregateInput
  }

  export type DentisteScalarWhereWithAggregatesInput = {
    AND?: DentisteScalarWhereWithAggregatesInput | DentisteScalarWhereWithAggregatesInput[]
    OR?: DentisteScalarWhereWithAggregatesInput[]
    NOT?: DentisteScalarWhereWithAggregatesInput | DentisteScalarWhereWithAggregatesInput[]
    id_dentiste?: StringWithAggregatesFilter<"Dentiste"> | string
    nom_dentiste?: StringWithAggregatesFilter<"Dentiste"> | string
    prenom_dentiste?: StringWithAggregatesFilter<"Dentiste"> | string
    telephone?: StringWithAggregatesFilter<"Dentiste"> | string
    email?: StringWithAggregatesFilter<"Dentiste"> | string
    id_compte?: StringNullableWithAggregatesFilter<"Dentiste"> | string | null
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id_patient?: StringFilter<"Patient"> | string
    nom_patient?: StringFilter<"Patient"> | string
    prenom_patient?: StringFilter<"Patient"> | string
    age?: IntFilter<"Patient"> | number
    quartier?: StringFilter<"Patient"> | string
    telephone?: StringFilter<"Patient"> | string
    compte_email?: StringNullableFilter<"Patient"> | string | null
    consultations?: ConsultationListRelationFilter
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }

  export type PatientOrderByWithRelationInput = {
    id_patient?: SortOrder
    nom_patient?: SortOrder
    prenom_patient?: SortOrder
    age?: SortOrder
    quartier?: SortOrder
    telephone?: SortOrder
    compte_email?: SortOrder
    consultations?: ConsultationOrderByRelationAggregateInput
    compte?: CompteOrderByWithRelationInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id_patient?: string
    telephone?: string
    compte_email?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    nom_patient?: StringFilter<"Patient"> | string
    prenom_patient?: StringFilter<"Patient"> | string
    age?: IntFilter<"Patient"> | number
    quartier?: StringFilter<"Patient"> | string
    consultations?: ConsultationListRelationFilter
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }, "id_patient" | "telephone" | "compte_email">

  export type PatientOrderByWithAggregationInput = {
    id_patient?: SortOrder
    nom_patient?: SortOrder
    prenom_patient?: SortOrder
    age?: SortOrder
    quartier?: SortOrder
    telephone?: SortOrder
    compte_email?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id_patient?: StringWithAggregatesFilter<"Patient"> | string
    nom_patient?: StringWithAggregatesFilter<"Patient"> | string
    prenom_patient?: StringWithAggregatesFilter<"Patient"> | string
    age?: IntWithAggregatesFilter<"Patient"> | number
    quartier?: StringWithAggregatesFilter<"Patient"> | string
    telephone?: StringWithAggregatesFilter<"Patient"> | string
    compte_email?: StringNullableWithAggregatesFilter<"Patient"> | string | null
  }

  export type CompteWhereInput = {
    AND?: CompteWhereInput | CompteWhereInput[]
    OR?: CompteWhereInput[]
    NOT?: CompteWhereInput | CompteWhereInput[]
    id_compte?: StringFilter<"Compte"> | string
    nom_utilisateur?: StringFilter<"Compte"> | string
    email?: StringFilter<"Compte"> | string
    clerkId?: StringNullableFilter<"Compte"> | string | null
    role?: EnumRoleNullableFilter<"Compte"> | $Enums.Role | null
    dentiste?: XOR<DentisteNullableRelationFilter, DentisteWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    notifications?: NotificationListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type CompteOrderByWithRelationInput = {
    id_compte?: SortOrder
    nom_utilisateur?: SortOrder
    email?: SortOrder
    clerkId?: SortOrder
    role?: SortOrder
    dentiste?: DentisteOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type CompteWhereUniqueInput = Prisma.AtLeast<{
    id_compte?: string
    nom_utilisateur?: string
    email?: string
    clerkId?: string
    AND?: CompteWhereInput | CompteWhereInput[]
    OR?: CompteWhereInput[]
    NOT?: CompteWhereInput | CompteWhereInput[]
    role?: EnumRoleNullableFilter<"Compte"> | $Enums.Role | null
    dentiste?: XOR<DentisteNullableRelationFilter, DentisteWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    notifications?: NotificationListRelationFilter
    messages?: MessageListRelationFilter
  }, "id_compte" | "nom_utilisateur" | "email" | "clerkId">

  export type CompteOrderByWithAggregationInput = {
    id_compte?: SortOrder
    nom_utilisateur?: SortOrder
    email?: SortOrder
    clerkId?: SortOrder
    role?: SortOrder
    _count?: CompteCountOrderByAggregateInput
    _max?: CompteMaxOrderByAggregateInput
    _min?: CompteMinOrderByAggregateInput
  }

  export type CompteScalarWhereWithAggregatesInput = {
    AND?: CompteScalarWhereWithAggregatesInput | CompteScalarWhereWithAggregatesInput[]
    OR?: CompteScalarWhereWithAggregatesInput[]
    NOT?: CompteScalarWhereWithAggregatesInput | CompteScalarWhereWithAggregatesInput[]
    id_compte?: StringWithAggregatesFilter<"Compte"> | string
    nom_utilisateur?: StringWithAggregatesFilter<"Compte"> | string
    email?: StringWithAggregatesFilter<"Compte"> | string
    clerkId?: StringNullableWithAggregatesFilter<"Compte"> | string | null
    role?: EnumRoleNullableWithAggregatesFilter<"Compte"> | $Enums.Role | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id_message?: StringFilter<"Message"> | string
    contenu_message?: StringFilter<"Message"> | string
    date_message?: DateTimeFilter<"Message"> | Date | string
    id_compte?: StringNullableFilter<"Message"> | string | null
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id_message?: SortOrder
    contenu_message?: SortOrder
    date_message?: SortOrder
    id_compte?: SortOrder
    compte?: CompteOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id_message?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    contenu_message?: StringFilter<"Message"> | string
    date_message?: DateTimeFilter<"Message"> | Date | string
    id_compte?: StringNullableFilter<"Message"> | string | null
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }, "id_message">

  export type MessageOrderByWithAggregationInput = {
    id_message?: SortOrder
    contenu_message?: SortOrder
    date_message?: SortOrder
    id_compte?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id_message?: StringWithAggregatesFilter<"Message"> | string
    contenu_message?: StringWithAggregatesFilter<"Message"> | string
    date_message?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    id_compte?: StringNullableWithAggregatesFilter<"Message"> | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id_notification?: StringFilter<"Notification"> | string
    contenu_notification?: StringFilter<"Notification"> | string
    date_notification?: DateTimeFilter<"Notification"> | Date | string
    id_compte?: StringNullableFilter<"Notification"> | string | null
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id_notification?: SortOrder
    contenu_notification?: SortOrder
    date_notification?: SortOrder
    id_compte?: SortOrder
    compte?: CompteOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id_notification?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    contenu_notification?: StringFilter<"Notification"> | string
    date_notification?: DateTimeFilter<"Notification"> | Date | string
    id_compte?: StringNullableFilter<"Notification"> | string | null
    compte?: XOR<CompteNullableRelationFilter, CompteWhereInput> | null
  }, "id_notification">

  export type NotificationOrderByWithAggregationInput = {
    id_notification?: SortOrder
    contenu_notification?: SortOrder
    date_notification?: SortOrder
    id_compte?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id_notification?: StringWithAggregatesFilter<"Notification"> | string
    contenu_notification?: StringWithAggregatesFilter<"Notification"> | string
    date_notification?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    id_compte?: StringNullableWithAggregatesFilter<"Notification"> | string | null
  }

  export type ConsultationWhereInput = {
    AND?: ConsultationWhereInput | ConsultationWhereInput[]
    OR?: ConsultationWhereInput[]
    NOT?: ConsultationWhereInput | ConsultationWhereInput[]
    id_consultation?: StringFilter<"Consultation"> | string
    date_consultation?: DateTimeFilter<"Consultation"> | Date | string
    motif?: StringFilter<"Consultation"> | string
    status?: StringFilter<"Consultation"> | string
    id_dentiste?: StringNullableFilter<"Consultation"> | string | null
    id_patient?: StringNullableFilter<"Consultation"> | string | null
    dentiste?: XOR<DentisteNullableRelationFilter, DentisteWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
  }

  export type ConsultationOrderByWithRelationInput = {
    id_consultation?: SortOrder
    date_consultation?: SortOrder
    motif?: SortOrder
    status?: SortOrder
    id_dentiste?: SortOrder
    id_patient?: SortOrder
    dentiste?: DentisteOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
  }

  export type ConsultationWhereUniqueInput = Prisma.AtLeast<{
    id_consultation?: string
    AND?: ConsultationWhereInput | ConsultationWhereInput[]
    OR?: ConsultationWhereInput[]
    NOT?: ConsultationWhereInput | ConsultationWhereInput[]
    date_consultation?: DateTimeFilter<"Consultation"> | Date | string
    motif?: StringFilter<"Consultation"> | string
    status?: StringFilter<"Consultation"> | string
    id_dentiste?: StringNullableFilter<"Consultation"> | string | null
    id_patient?: StringNullableFilter<"Consultation"> | string | null
    dentiste?: XOR<DentisteNullableRelationFilter, DentisteWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
  }, "id_consultation">

  export type ConsultationOrderByWithAggregationInput = {
    id_consultation?: SortOrder
    date_consultation?: SortOrder
    motif?: SortOrder
    status?: SortOrder
    id_dentiste?: SortOrder
    id_patient?: SortOrder
    _count?: ConsultationCountOrderByAggregateInput
    _max?: ConsultationMaxOrderByAggregateInput
    _min?: ConsultationMinOrderByAggregateInput
  }

  export type ConsultationScalarWhereWithAggregatesInput = {
    AND?: ConsultationScalarWhereWithAggregatesInput | ConsultationScalarWhereWithAggregatesInput[]
    OR?: ConsultationScalarWhereWithAggregatesInput[]
    NOT?: ConsultationScalarWhereWithAggregatesInput | ConsultationScalarWhereWithAggregatesInput[]
    id_consultation?: StringWithAggregatesFilter<"Consultation"> | string
    date_consultation?: DateTimeWithAggregatesFilter<"Consultation"> | Date | string
    motif?: StringWithAggregatesFilter<"Consultation"> | string
    status?: StringWithAggregatesFilter<"Consultation"> | string
    id_dentiste?: StringNullableWithAggregatesFilter<"Consultation"> | string | null
    id_patient?: StringNullableWithAggregatesFilter<"Consultation"> | string | null
  }

  export type PlanificationCreateInput = {
    id_planification?: string
    date_service: Date | string
    heures_debut: string
    heures_fin: string
    dentiste?: DentisteCreateNestedOneWithoutPlanificationsInput
  }

  export type PlanificationUncheckedCreateInput = {
    id_planification?: string
    date_service: Date | string
    heures_debut: string
    heures_fin: string
    id_dentiste?: string | null
  }

  export type PlanificationUpdateInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
    dentiste?: DentisteUpdateOneWithoutPlanificationsNestedInput
  }

  export type PlanificationUncheckedUpdateInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
    id_dentiste?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanificationCreateManyInput = {
    id_planification?: string
    date_service: Date | string
    heures_debut: string
    heures_fin: string
    id_dentiste?: string | null
  }

  export type PlanificationUpdateManyMutationInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
  }

  export type PlanificationUncheckedUpdateManyInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
    id_dentiste?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentisteCreateInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    consultations?: ConsultationCreateNestedManyWithoutDentisteInput
    planifications?: PlanificationCreateNestedManyWithoutDentisteInput
    compte?: CompteCreateNestedOneWithoutDentisteInput
  }

  export type DentisteUncheckedCreateInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    id_compte?: string | null
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDentisteInput
    planifications?: PlanificationUncheckedCreateNestedManyWithoutDentisteInput
  }

  export type DentisteUpdateInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUpdateManyWithoutDentisteNestedInput
    planifications?: PlanificationUpdateManyWithoutDentisteNestedInput
    compte?: CompteUpdateOneWithoutDentisteNestedInput
  }

  export type DentisteUncheckedUpdateInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
    consultations?: ConsultationUncheckedUpdateManyWithoutDentisteNestedInput
    planifications?: PlanificationUncheckedUpdateManyWithoutDentisteNestedInput
  }

  export type DentisteCreateManyInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    id_compte?: string | null
  }

  export type DentisteUpdateManyMutationInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DentisteUncheckedUpdateManyInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientCreateInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    consultations?: ConsultationCreateNestedManyWithoutPatientInput
    compte?: CompteCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    compte_email?: string | null
    consultations?: ConsultationUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUpdateManyWithoutPatientNestedInput
    compte?: CompteUpdateOneWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    compte_email?: NullableStringFieldUpdateOperationsInput | string | null
    consultations?: ConsultationUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    compte_email?: string | null
  }

  export type PatientUpdateManyMutationInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUncheckedUpdateManyInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    compte_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompteCreateInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteCreateNestedOneWithoutCompteInput
    patient?: PatientCreateNestedOneWithoutCompteInput
    notifications?: NotificationCreateNestedManyWithoutCompteInput
    messages?: MessageCreateNestedManyWithoutCompteInput
  }

  export type CompteUncheckedCreateInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteUncheckedCreateNestedOneWithoutCompteInput
    patient?: PatientUncheckedCreateNestedOneWithoutCompteInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompteInput
    messages?: MessageUncheckedCreateNestedManyWithoutCompteInput
  }

  export type CompteUpdateInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUpdateOneWithoutCompteNestedInput
    patient?: PatientUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUpdateManyWithoutCompteNestedInput
    messages?: MessageUpdateManyWithoutCompteNestedInput
  }

  export type CompteUncheckedUpdateInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUncheckedUpdateOneWithoutCompteNestedInput
    patient?: PatientUncheckedUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompteNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCompteNestedInput
  }

  export type CompteCreateManyInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
  }

  export type CompteUpdateManyMutationInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
  }

  export type CompteUncheckedUpdateManyInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
  }

  export type MessageCreateInput = {
    id_message?: string
    contenu_message: string
    date_message: Date | string
    compte?: CompteCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id_message?: string
    contenu_message: string
    date_message: Date | string
    id_compte?: string | null
  }

  export type MessageUpdateInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
    compte?: CompteUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyInput = {
    id_message?: string
    contenu_message: string
    date_message: Date | string
    id_compte?: string | null
  }

  export type MessageUpdateManyMutationInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateInput = {
    id_notification?: string
    contenu_notification: string
    date_notification: Date | string
    compte?: CompteCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id_notification?: string
    contenu_notification: string
    date_notification: Date | string
    id_compte?: string | null
  }

  export type NotificationUpdateInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
    compte?: CompteUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateManyInput = {
    id_notification?: string
    contenu_notification: string
    date_notification: Date | string
    id_compte?: string | null
  }

  export type NotificationUpdateManyMutationInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsultationCreateInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    dentiste?: DentisteCreateNestedOneWithoutConsultationsInput
    patient?: PatientCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationUncheckedCreateInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    id_dentiste?: string | null
    id_patient?: string | null
  }

  export type ConsultationUpdateInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dentiste?: DentisteUpdateOneWithoutConsultationsNestedInput
    patient?: PatientUpdateOneWithoutConsultationsNestedInput
  }

  export type ConsultationUncheckedUpdateInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_dentiste?: NullableStringFieldUpdateOperationsInput | string | null
    id_patient?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsultationCreateManyInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    id_dentiste?: string | null
    id_patient?: string | null
  }

  export type ConsultationUpdateManyMutationInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ConsultationUncheckedUpdateManyInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_dentiste?: NullableStringFieldUpdateOperationsInput | string | null
    id_patient?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DentisteNullableRelationFilter = {
    is?: DentisteWhereInput | null
    isNot?: DentisteWhereInput | null
  }

  export type PlanificationCountOrderByAggregateInput = {
    id_planification?: SortOrder
    date_service?: SortOrder
    heures_debut?: SortOrder
    heures_fin?: SortOrder
    id_dentiste?: SortOrder
  }

  export type PlanificationMaxOrderByAggregateInput = {
    id_planification?: SortOrder
    date_service?: SortOrder
    heures_debut?: SortOrder
    heures_fin?: SortOrder
    id_dentiste?: SortOrder
  }

  export type PlanificationMinOrderByAggregateInput = {
    id_planification?: SortOrder
    date_service?: SortOrder
    heures_debut?: SortOrder
    heures_fin?: SortOrder
    id_dentiste?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type ConsultationListRelationFilter = {
    every?: ConsultationWhereInput
    some?: ConsultationWhereInput
    none?: ConsultationWhereInput
  }

  export type PlanificationListRelationFilter = {
    every?: PlanificationWhereInput
    some?: PlanificationWhereInput
    none?: PlanificationWhereInput
  }

  export type CompteNullableRelationFilter = {
    is?: CompteWhereInput | null
    isNot?: CompteWhereInput | null
  }

  export type ConsultationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DentisteCountOrderByAggregateInput = {
    id_dentiste?: SortOrder
    nom_dentiste?: SortOrder
    prenom_dentiste?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    id_compte?: SortOrder
  }

  export type DentisteMaxOrderByAggregateInput = {
    id_dentiste?: SortOrder
    nom_dentiste?: SortOrder
    prenom_dentiste?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    id_compte?: SortOrder
  }

  export type DentisteMinOrderByAggregateInput = {
    id_dentiste?: SortOrder
    nom_dentiste?: SortOrder
    prenom_dentiste?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    id_compte?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PatientCountOrderByAggregateInput = {
    id_patient?: SortOrder
    nom_patient?: SortOrder
    prenom_patient?: SortOrder
    age?: SortOrder
    quartier?: SortOrder
    telephone?: SortOrder
    compte_email?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id_patient?: SortOrder
    nom_patient?: SortOrder
    prenom_patient?: SortOrder
    age?: SortOrder
    quartier?: SortOrder
    telephone?: SortOrder
    compte_email?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id_patient?: SortOrder
    nom_patient?: SortOrder
    prenom_patient?: SortOrder
    age?: SortOrder
    quartier?: SortOrder
    telephone?: SortOrder
    compte_email?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
    isSet?: boolean
  }

  export type PatientNullableRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompteCountOrderByAggregateInput = {
    id_compte?: SortOrder
    nom_utilisateur?: SortOrder
    email?: SortOrder
    clerkId?: SortOrder
    role?: SortOrder
  }

  export type CompteMaxOrderByAggregateInput = {
    id_compte?: SortOrder
    nom_utilisateur?: SortOrder
    email?: SortOrder
    clerkId?: SortOrder
    role?: SortOrder
  }

  export type CompteMinOrderByAggregateInput = {
    id_compte?: SortOrder
    nom_utilisateur?: SortOrder
    email?: SortOrder
    clerkId?: SortOrder
    role?: SortOrder
  }

  export type EnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type MessageCountOrderByAggregateInput = {
    id_message?: SortOrder
    contenu_message?: SortOrder
    date_message?: SortOrder
    id_compte?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id_message?: SortOrder
    contenu_message?: SortOrder
    date_message?: SortOrder
    id_compte?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id_message?: SortOrder
    contenu_message?: SortOrder
    date_message?: SortOrder
    id_compte?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id_notification?: SortOrder
    contenu_notification?: SortOrder
    date_notification?: SortOrder
    id_compte?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id_notification?: SortOrder
    contenu_notification?: SortOrder
    date_notification?: SortOrder
    id_compte?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id_notification?: SortOrder
    contenu_notification?: SortOrder
    date_notification?: SortOrder
    id_compte?: SortOrder
  }

  export type ConsultationCountOrderByAggregateInput = {
    id_consultation?: SortOrder
    date_consultation?: SortOrder
    motif?: SortOrder
    status?: SortOrder
    id_dentiste?: SortOrder
    id_patient?: SortOrder
  }

  export type ConsultationMaxOrderByAggregateInput = {
    id_consultation?: SortOrder
    date_consultation?: SortOrder
    motif?: SortOrder
    status?: SortOrder
    id_dentiste?: SortOrder
    id_patient?: SortOrder
  }

  export type ConsultationMinOrderByAggregateInput = {
    id_consultation?: SortOrder
    date_consultation?: SortOrder
    motif?: SortOrder
    status?: SortOrder
    id_dentiste?: SortOrder
    id_patient?: SortOrder
  }

  export type DentisteCreateNestedOneWithoutPlanificationsInput = {
    create?: XOR<DentisteCreateWithoutPlanificationsInput, DentisteUncheckedCreateWithoutPlanificationsInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutPlanificationsInput
    connect?: DentisteWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DentisteUpdateOneWithoutPlanificationsNestedInput = {
    create?: XOR<DentisteCreateWithoutPlanificationsInput, DentisteUncheckedCreateWithoutPlanificationsInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutPlanificationsInput
    upsert?: DentisteUpsertWithoutPlanificationsInput
    disconnect?: boolean
    delete?: DentisteWhereInput | boolean
    connect?: DentisteWhereUniqueInput
    update?: XOR<XOR<DentisteUpdateToOneWithWhereWithoutPlanificationsInput, DentisteUpdateWithoutPlanificationsInput>, DentisteUncheckedUpdateWithoutPlanificationsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type ConsultationCreateNestedManyWithoutDentisteInput = {
    create?: XOR<ConsultationCreateWithoutDentisteInput, ConsultationUncheckedCreateWithoutDentisteInput> | ConsultationCreateWithoutDentisteInput[] | ConsultationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDentisteInput | ConsultationCreateOrConnectWithoutDentisteInput[]
    createMany?: ConsultationCreateManyDentisteInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type PlanificationCreateNestedManyWithoutDentisteInput = {
    create?: XOR<PlanificationCreateWithoutDentisteInput, PlanificationUncheckedCreateWithoutDentisteInput> | PlanificationCreateWithoutDentisteInput[] | PlanificationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: PlanificationCreateOrConnectWithoutDentisteInput | PlanificationCreateOrConnectWithoutDentisteInput[]
    createMany?: PlanificationCreateManyDentisteInputEnvelope
    connect?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
  }

  export type CompteCreateNestedOneWithoutDentisteInput = {
    create?: XOR<CompteCreateWithoutDentisteInput, CompteUncheckedCreateWithoutDentisteInput>
    connectOrCreate?: CompteCreateOrConnectWithoutDentisteInput
    connect?: CompteWhereUniqueInput
  }

  export type ConsultationUncheckedCreateNestedManyWithoutDentisteInput = {
    create?: XOR<ConsultationCreateWithoutDentisteInput, ConsultationUncheckedCreateWithoutDentisteInput> | ConsultationCreateWithoutDentisteInput[] | ConsultationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDentisteInput | ConsultationCreateOrConnectWithoutDentisteInput[]
    createMany?: ConsultationCreateManyDentisteInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type PlanificationUncheckedCreateNestedManyWithoutDentisteInput = {
    create?: XOR<PlanificationCreateWithoutDentisteInput, PlanificationUncheckedCreateWithoutDentisteInput> | PlanificationCreateWithoutDentisteInput[] | PlanificationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: PlanificationCreateOrConnectWithoutDentisteInput | PlanificationCreateOrConnectWithoutDentisteInput[]
    createMany?: PlanificationCreateManyDentisteInputEnvelope
    connect?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
  }

  export type ConsultationUpdateManyWithoutDentisteNestedInput = {
    create?: XOR<ConsultationCreateWithoutDentisteInput, ConsultationUncheckedCreateWithoutDentisteInput> | ConsultationCreateWithoutDentisteInput[] | ConsultationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDentisteInput | ConsultationCreateOrConnectWithoutDentisteInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutDentisteInput | ConsultationUpsertWithWhereUniqueWithoutDentisteInput[]
    createMany?: ConsultationCreateManyDentisteInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutDentisteInput | ConsultationUpdateWithWhereUniqueWithoutDentisteInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutDentisteInput | ConsultationUpdateManyWithWhereWithoutDentisteInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type PlanificationUpdateManyWithoutDentisteNestedInput = {
    create?: XOR<PlanificationCreateWithoutDentisteInput, PlanificationUncheckedCreateWithoutDentisteInput> | PlanificationCreateWithoutDentisteInput[] | PlanificationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: PlanificationCreateOrConnectWithoutDentisteInput | PlanificationCreateOrConnectWithoutDentisteInput[]
    upsert?: PlanificationUpsertWithWhereUniqueWithoutDentisteInput | PlanificationUpsertWithWhereUniqueWithoutDentisteInput[]
    createMany?: PlanificationCreateManyDentisteInputEnvelope
    set?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    disconnect?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    delete?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    connect?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    update?: PlanificationUpdateWithWhereUniqueWithoutDentisteInput | PlanificationUpdateWithWhereUniqueWithoutDentisteInput[]
    updateMany?: PlanificationUpdateManyWithWhereWithoutDentisteInput | PlanificationUpdateManyWithWhereWithoutDentisteInput[]
    deleteMany?: PlanificationScalarWhereInput | PlanificationScalarWhereInput[]
  }

  export type CompteUpdateOneWithoutDentisteNestedInput = {
    create?: XOR<CompteCreateWithoutDentisteInput, CompteUncheckedCreateWithoutDentisteInput>
    connectOrCreate?: CompteCreateOrConnectWithoutDentisteInput
    upsert?: CompteUpsertWithoutDentisteInput
    disconnect?: boolean
    delete?: CompteWhereInput | boolean
    connect?: CompteWhereUniqueInput
    update?: XOR<XOR<CompteUpdateToOneWithWhereWithoutDentisteInput, CompteUpdateWithoutDentisteInput>, CompteUncheckedUpdateWithoutDentisteInput>
  }

  export type ConsultationUncheckedUpdateManyWithoutDentisteNestedInput = {
    create?: XOR<ConsultationCreateWithoutDentisteInput, ConsultationUncheckedCreateWithoutDentisteInput> | ConsultationCreateWithoutDentisteInput[] | ConsultationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDentisteInput | ConsultationCreateOrConnectWithoutDentisteInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutDentisteInput | ConsultationUpsertWithWhereUniqueWithoutDentisteInput[]
    createMany?: ConsultationCreateManyDentisteInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutDentisteInput | ConsultationUpdateWithWhereUniqueWithoutDentisteInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutDentisteInput | ConsultationUpdateManyWithWhereWithoutDentisteInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type PlanificationUncheckedUpdateManyWithoutDentisteNestedInput = {
    create?: XOR<PlanificationCreateWithoutDentisteInput, PlanificationUncheckedCreateWithoutDentisteInput> | PlanificationCreateWithoutDentisteInput[] | PlanificationUncheckedCreateWithoutDentisteInput[]
    connectOrCreate?: PlanificationCreateOrConnectWithoutDentisteInput | PlanificationCreateOrConnectWithoutDentisteInput[]
    upsert?: PlanificationUpsertWithWhereUniqueWithoutDentisteInput | PlanificationUpsertWithWhereUniqueWithoutDentisteInput[]
    createMany?: PlanificationCreateManyDentisteInputEnvelope
    set?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    disconnect?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    delete?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    connect?: PlanificationWhereUniqueInput | PlanificationWhereUniqueInput[]
    update?: PlanificationUpdateWithWhereUniqueWithoutDentisteInput | PlanificationUpdateWithWhereUniqueWithoutDentisteInput[]
    updateMany?: PlanificationUpdateManyWithWhereWithoutDentisteInput | PlanificationUpdateManyWithWhereWithoutDentisteInput[]
    deleteMany?: PlanificationScalarWhereInput | PlanificationScalarWhereInput[]
  }

  export type ConsultationCreateNestedManyWithoutPatientInput = {
    create?: XOR<ConsultationCreateWithoutPatientInput, ConsultationUncheckedCreateWithoutPatientInput> | ConsultationCreateWithoutPatientInput[] | ConsultationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutPatientInput | ConsultationCreateOrConnectWithoutPatientInput[]
    createMany?: ConsultationCreateManyPatientInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type CompteCreateNestedOneWithoutPatientInput = {
    create?: XOR<CompteCreateWithoutPatientInput, CompteUncheckedCreateWithoutPatientInput>
    connectOrCreate?: CompteCreateOrConnectWithoutPatientInput
    connect?: CompteWhereUniqueInput
  }

  export type ConsultationUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ConsultationCreateWithoutPatientInput, ConsultationUncheckedCreateWithoutPatientInput> | ConsultationCreateWithoutPatientInput[] | ConsultationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutPatientInput | ConsultationCreateOrConnectWithoutPatientInput[]
    createMany?: ConsultationCreateManyPatientInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConsultationUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ConsultationCreateWithoutPatientInput, ConsultationUncheckedCreateWithoutPatientInput> | ConsultationCreateWithoutPatientInput[] | ConsultationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutPatientInput | ConsultationCreateOrConnectWithoutPatientInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutPatientInput | ConsultationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ConsultationCreateManyPatientInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutPatientInput | ConsultationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutPatientInput | ConsultationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type CompteUpdateOneWithoutPatientNestedInput = {
    create?: XOR<CompteCreateWithoutPatientInput, CompteUncheckedCreateWithoutPatientInput>
    connectOrCreate?: CompteCreateOrConnectWithoutPatientInput
    upsert?: CompteUpsertWithoutPatientInput
    disconnect?: boolean
    delete?: CompteWhereInput | boolean
    connect?: CompteWhereUniqueInput
    update?: XOR<XOR<CompteUpdateToOneWithWhereWithoutPatientInput, CompteUpdateWithoutPatientInput>, CompteUncheckedUpdateWithoutPatientInput>
  }

  export type ConsultationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ConsultationCreateWithoutPatientInput, ConsultationUncheckedCreateWithoutPatientInput> | ConsultationCreateWithoutPatientInput[] | ConsultationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutPatientInput | ConsultationCreateOrConnectWithoutPatientInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutPatientInput | ConsultationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ConsultationCreateManyPatientInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutPatientInput | ConsultationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutPatientInput | ConsultationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type DentisteCreateNestedOneWithoutCompteInput = {
    create?: XOR<DentisteCreateWithoutCompteInput, DentisteUncheckedCreateWithoutCompteInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutCompteInput
    connect?: DentisteWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutCompteInput = {
    create?: XOR<PatientCreateWithoutCompteInput, PatientUncheckedCreateWithoutCompteInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCompteInput
    connect?: PatientWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutCompteInput = {
    create?: XOR<NotificationCreateWithoutCompteInput, NotificationUncheckedCreateWithoutCompteInput> | NotificationCreateWithoutCompteInput[] | NotificationUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompteInput | NotificationCreateOrConnectWithoutCompteInput[]
    createMany?: NotificationCreateManyCompteInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutCompteInput = {
    create?: XOR<MessageCreateWithoutCompteInput, MessageUncheckedCreateWithoutCompteInput> | MessageCreateWithoutCompteInput[] | MessageUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCompteInput | MessageCreateOrConnectWithoutCompteInput[]
    createMany?: MessageCreateManyCompteInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DentisteUncheckedCreateNestedOneWithoutCompteInput = {
    create?: XOR<DentisteCreateWithoutCompteInput, DentisteUncheckedCreateWithoutCompteInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutCompteInput
    connect?: DentisteWhereUniqueInput
  }

  export type PatientUncheckedCreateNestedOneWithoutCompteInput = {
    create?: XOR<PatientCreateWithoutCompteInput, PatientUncheckedCreateWithoutCompteInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCompteInput
    connect?: PatientWhereUniqueInput
  }

  export type NotificationUncheckedCreateNestedManyWithoutCompteInput = {
    create?: XOR<NotificationCreateWithoutCompteInput, NotificationUncheckedCreateWithoutCompteInput> | NotificationCreateWithoutCompteInput[] | NotificationUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompteInput | NotificationCreateOrConnectWithoutCompteInput[]
    createMany?: NotificationCreateManyCompteInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutCompteInput = {
    create?: XOR<MessageCreateWithoutCompteInput, MessageUncheckedCreateWithoutCompteInput> | MessageCreateWithoutCompteInput[] | MessageUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCompteInput | MessageCreateOrConnectWithoutCompteInput[]
    createMany?: MessageCreateManyCompteInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NullableEnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role | null
    unset?: boolean
  }

  export type DentisteUpdateOneWithoutCompteNestedInput = {
    create?: XOR<DentisteCreateWithoutCompteInput, DentisteUncheckedCreateWithoutCompteInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutCompteInput
    upsert?: DentisteUpsertWithoutCompteInput
    disconnect?: DentisteWhereInput | boolean
    delete?: DentisteWhereInput | boolean
    connect?: DentisteWhereUniqueInput
    update?: XOR<XOR<DentisteUpdateToOneWithWhereWithoutCompteInput, DentisteUpdateWithoutCompteInput>, DentisteUncheckedUpdateWithoutCompteInput>
  }

  export type PatientUpdateOneWithoutCompteNestedInput = {
    create?: XOR<PatientCreateWithoutCompteInput, PatientUncheckedCreateWithoutCompteInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCompteInput
    upsert?: PatientUpsertWithoutCompteInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutCompteInput, PatientUpdateWithoutCompteInput>, PatientUncheckedUpdateWithoutCompteInput>
  }

  export type NotificationUpdateManyWithoutCompteNestedInput = {
    create?: XOR<NotificationCreateWithoutCompteInput, NotificationUncheckedCreateWithoutCompteInput> | NotificationCreateWithoutCompteInput[] | NotificationUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompteInput | NotificationCreateOrConnectWithoutCompteInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCompteInput | NotificationUpsertWithWhereUniqueWithoutCompteInput[]
    createMany?: NotificationCreateManyCompteInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCompteInput | NotificationUpdateWithWhereUniqueWithoutCompteInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCompteInput | NotificationUpdateManyWithWhereWithoutCompteInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutCompteNestedInput = {
    create?: XOR<MessageCreateWithoutCompteInput, MessageUncheckedCreateWithoutCompteInput> | MessageCreateWithoutCompteInput[] | MessageUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCompteInput | MessageCreateOrConnectWithoutCompteInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutCompteInput | MessageUpsertWithWhereUniqueWithoutCompteInput[]
    createMany?: MessageCreateManyCompteInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutCompteInput | MessageUpdateWithWhereUniqueWithoutCompteInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutCompteInput | MessageUpdateManyWithWhereWithoutCompteInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DentisteUncheckedUpdateOneWithoutCompteNestedInput = {
    create?: XOR<DentisteCreateWithoutCompteInput, DentisteUncheckedCreateWithoutCompteInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutCompteInput
    upsert?: DentisteUpsertWithoutCompteInput
    disconnect?: DentisteWhereInput | boolean
    delete?: DentisteWhereInput | boolean
    connect?: DentisteWhereUniqueInput
    update?: XOR<XOR<DentisteUpdateToOneWithWhereWithoutCompteInput, DentisteUpdateWithoutCompteInput>, DentisteUncheckedUpdateWithoutCompteInput>
  }

  export type PatientUncheckedUpdateOneWithoutCompteNestedInput = {
    create?: XOR<PatientCreateWithoutCompteInput, PatientUncheckedCreateWithoutCompteInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCompteInput
    upsert?: PatientUpsertWithoutCompteInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutCompteInput, PatientUpdateWithoutCompteInput>, PatientUncheckedUpdateWithoutCompteInput>
  }

  export type NotificationUncheckedUpdateManyWithoutCompteNestedInput = {
    create?: XOR<NotificationCreateWithoutCompteInput, NotificationUncheckedCreateWithoutCompteInput> | NotificationCreateWithoutCompteInput[] | NotificationUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompteInput | NotificationCreateOrConnectWithoutCompteInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCompteInput | NotificationUpsertWithWhereUniqueWithoutCompteInput[]
    createMany?: NotificationCreateManyCompteInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCompteInput | NotificationUpdateWithWhereUniqueWithoutCompteInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCompteInput | NotificationUpdateManyWithWhereWithoutCompteInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutCompteNestedInput = {
    create?: XOR<MessageCreateWithoutCompteInput, MessageUncheckedCreateWithoutCompteInput> | MessageCreateWithoutCompteInput[] | MessageUncheckedCreateWithoutCompteInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCompteInput | MessageCreateOrConnectWithoutCompteInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutCompteInput | MessageUpsertWithWhereUniqueWithoutCompteInput[]
    createMany?: MessageCreateManyCompteInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutCompteInput | MessageUpdateWithWhereUniqueWithoutCompteInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutCompteInput | MessageUpdateManyWithWhereWithoutCompteInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CompteCreateNestedOneWithoutMessagesInput = {
    create?: XOR<CompteCreateWithoutMessagesInput, CompteUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CompteCreateOrConnectWithoutMessagesInput
    connect?: CompteWhereUniqueInput
  }

  export type CompteUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<CompteCreateWithoutMessagesInput, CompteUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CompteCreateOrConnectWithoutMessagesInput
    upsert?: CompteUpsertWithoutMessagesInput
    disconnect?: boolean
    delete?: CompteWhereInput | boolean
    connect?: CompteWhereUniqueInput
    update?: XOR<XOR<CompteUpdateToOneWithWhereWithoutMessagesInput, CompteUpdateWithoutMessagesInput>, CompteUncheckedUpdateWithoutMessagesInput>
  }

  export type CompteCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<CompteCreateWithoutNotificationsInput, CompteUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CompteCreateOrConnectWithoutNotificationsInput
    connect?: CompteWhereUniqueInput
  }

  export type CompteUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<CompteCreateWithoutNotificationsInput, CompteUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CompteCreateOrConnectWithoutNotificationsInput
    upsert?: CompteUpsertWithoutNotificationsInput
    disconnect?: boolean
    delete?: CompteWhereInput | boolean
    connect?: CompteWhereUniqueInput
    update?: XOR<XOR<CompteUpdateToOneWithWhereWithoutNotificationsInput, CompteUpdateWithoutNotificationsInput>, CompteUncheckedUpdateWithoutNotificationsInput>
  }

  export type DentisteCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<DentisteCreateWithoutConsultationsInput, DentisteUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutConsultationsInput
    connect?: DentisteWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<PatientCreateWithoutConsultationsInput, PatientUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutConsultationsInput
    connect?: PatientWhereUniqueInput
  }

  export type DentisteUpdateOneWithoutConsultationsNestedInput = {
    create?: XOR<DentisteCreateWithoutConsultationsInput, DentisteUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: DentisteCreateOrConnectWithoutConsultationsInput
    upsert?: DentisteUpsertWithoutConsultationsInput
    disconnect?: boolean
    delete?: DentisteWhereInput | boolean
    connect?: DentisteWhereUniqueInput
    update?: XOR<XOR<DentisteUpdateToOneWithWhereWithoutConsultationsInput, DentisteUpdateWithoutConsultationsInput>, DentisteUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientUpdateOneWithoutConsultationsNestedInput = {
    create?: XOR<PatientCreateWithoutConsultationsInput, PatientUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutConsultationsInput
    upsert?: PatientUpsertWithoutConsultationsInput
    disconnect?: boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutConsultationsInput, PatientUpdateWithoutConsultationsInput>, PatientUncheckedUpdateWithoutConsultationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
    isSet?: boolean
  }

  export type NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DentisteCreateWithoutPlanificationsInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    consultations?: ConsultationCreateNestedManyWithoutDentisteInput
    compte?: CompteCreateNestedOneWithoutDentisteInput
  }

  export type DentisteUncheckedCreateWithoutPlanificationsInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    id_compte?: string | null
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDentisteInput
  }

  export type DentisteCreateOrConnectWithoutPlanificationsInput = {
    where: DentisteWhereUniqueInput
    create: XOR<DentisteCreateWithoutPlanificationsInput, DentisteUncheckedCreateWithoutPlanificationsInput>
  }

  export type DentisteUpsertWithoutPlanificationsInput = {
    update: XOR<DentisteUpdateWithoutPlanificationsInput, DentisteUncheckedUpdateWithoutPlanificationsInput>
    create: XOR<DentisteCreateWithoutPlanificationsInput, DentisteUncheckedCreateWithoutPlanificationsInput>
    where?: DentisteWhereInput
  }

  export type DentisteUpdateToOneWithWhereWithoutPlanificationsInput = {
    where?: DentisteWhereInput
    data: XOR<DentisteUpdateWithoutPlanificationsInput, DentisteUncheckedUpdateWithoutPlanificationsInput>
  }

  export type DentisteUpdateWithoutPlanificationsInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUpdateManyWithoutDentisteNestedInput
    compte?: CompteUpdateOneWithoutDentisteNestedInput
  }

  export type DentisteUncheckedUpdateWithoutPlanificationsInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
    consultations?: ConsultationUncheckedUpdateManyWithoutDentisteNestedInput
  }

  export type ConsultationCreateWithoutDentisteInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    patient?: PatientCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationUncheckedCreateWithoutDentisteInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    id_patient?: string | null
  }

  export type ConsultationCreateOrConnectWithoutDentisteInput = {
    where: ConsultationWhereUniqueInput
    create: XOR<ConsultationCreateWithoutDentisteInput, ConsultationUncheckedCreateWithoutDentisteInput>
  }

  export type ConsultationCreateManyDentisteInputEnvelope = {
    data: ConsultationCreateManyDentisteInput | ConsultationCreateManyDentisteInput[]
  }

  export type PlanificationCreateWithoutDentisteInput = {
    id_planification?: string
    date_service: Date | string
    heures_debut: string
    heures_fin: string
  }

  export type PlanificationUncheckedCreateWithoutDentisteInput = {
    id_planification?: string
    date_service: Date | string
    heures_debut: string
    heures_fin: string
  }

  export type PlanificationCreateOrConnectWithoutDentisteInput = {
    where: PlanificationWhereUniqueInput
    create: XOR<PlanificationCreateWithoutDentisteInput, PlanificationUncheckedCreateWithoutDentisteInput>
  }

  export type PlanificationCreateManyDentisteInputEnvelope = {
    data: PlanificationCreateManyDentisteInput | PlanificationCreateManyDentisteInput[]
  }

  export type CompteCreateWithoutDentisteInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    patient?: PatientCreateNestedOneWithoutCompteInput
    notifications?: NotificationCreateNestedManyWithoutCompteInput
    messages?: MessageCreateNestedManyWithoutCompteInput
  }

  export type CompteUncheckedCreateWithoutDentisteInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    patient?: PatientUncheckedCreateNestedOneWithoutCompteInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompteInput
    messages?: MessageUncheckedCreateNestedManyWithoutCompteInput
  }

  export type CompteCreateOrConnectWithoutDentisteInput = {
    where: CompteWhereUniqueInput
    create: XOR<CompteCreateWithoutDentisteInput, CompteUncheckedCreateWithoutDentisteInput>
  }

  export type ConsultationUpsertWithWhereUniqueWithoutDentisteInput = {
    where: ConsultationWhereUniqueInput
    update: XOR<ConsultationUpdateWithoutDentisteInput, ConsultationUncheckedUpdateWithoutDentisteInput>
    create: XOR<ConsultationCreateWithoutDentisteInput, ConsultationUncheckedCreateWithoutDentisteInput>
  }

  export type ConsultationUpdateWithWhereUniqueWithoutDentisteInput = {
    where: ConsultationWhereUniqueInput
    data: XOR<ConsultationUpdateWithoutDentisteInput, ConsultationUncheckedUpdateWithoutDentisteInput>
  }

  export type ConsultationUpdateManyWithWhereWithoutDentisteInput = {
    where: ConsultationScalarWhereInput
    data: XOR<ConsultationUpdateManyMutationInput, ConsultationUncheckedUpdateManyWithoutDentisteInput>
  }

  export type ConsultationScalarWhereInput = {
    AND?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
    OR?: ConsultationScalarWhereInput[]
    NOT?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
    id_consultation?: StringFilter<"Consultation"> | string
    date_consultation?: DateTimeFilter<"Consultation"> | Date | string
    motif?: StringFilter<"Consultation"> | string
    status?: StringFilter<"Consultation"> | string
    id_dentiste?: StringNullableFilter<"Consultation"> | string | null
    id_patient?: StringNullableFilter<"Consultation"> | string | null
  }

  export type PlanificationUpsertWithWhereUniqueWithoutDentisteInput = {
    where: PlanificationWhereUniqueInput
    update: XOR<PlanificationUpdateWithoutDentisteInput, PlanificationUncheckedUpdateWithoutDentisteInput>
    create: XOR<PlanificationCreateWithoutDentisteInput, PlanificationUncheckedCreateWithoutDentisteInput>
  }

  export type PlanificationUpdateWithWhereUniqueWithoutDentisteInput = {
    where: PlanificationWhereUniqueInput
    data: XOR<PlanificationUpdateWithoutDentisteInput, PlanificationUncheckedUpdateWithoutDentisteInput>
  }

  export type PlanificationUpdateManyWithWhereWithoutDentisteInput = {
    where: PlanificationScalarWhereInput
    data: XOR<PlanificationUpdateManyMutationInput, PlanificationUncheckedUpdateManyWithoutDentisteInput>
  }

  export type PlanificationScalarWhereInput = {
    AND?: PlanificationScalarWhereInput | PlanificationScalarWhereInput[]
    OR?: PlanificationScalarWhereInput[]
    NOT?: PlanificationScalarWhereInput | PlanificationScalarWhereInput[]
    id_planification?: StringFilter<"Planification"> | string
    date_service?: DateTimeFilter<"Planification"> | Date | string
    heures_debut?: StringFilter<"Planification"> | string
    heures_fin?: StringFilter<"Planification"> | string
    id_dentiste?: StringNullableFilter<"Planification"> | string | null
  }

  export type CompteUpsertWithoutDentisteInput = {
    update: XOR<CompteUpdateWithoutDentisteInput, CompteUncheckedUpdateWithoutDentisteInput>
    create: XOR<CompteCreateWithoutDentisteInput, CompteUncheckedCreateWithoutDentisteInput>
    where?: CompteWhereInput
  }

  export type CompteUpdateToOneWithWhereWithoutDentisteInput = {
    where?: CompteWhereInput
    data: XOR<CompteUpdateWithoutDentisteInput, CompteUncheckedUpdateWithoutDentisteInput>
  }

  export type CompteUpdateWithoutDentisteInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    patient?: PatientUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUpdateManyWithoutCompteNestedInput
    messages?: MessageUpdateManyWithoutCompteNestedInput
  }

  export type CompteUncheckedUpdateWithoutDentisteInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    patient?: PatientUncheckedUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompteNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCompteNestedInput
  }

  export type ConsultationCreateWithoutPatientInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    dentiste?: DentisteCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationUncheckedCreateWithoutPatientInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    id_dentiste?: string | null
  }

  export type ConsultationCreateOrConnectWithoutPatientInput = {
    where: ConsultationWhereUniqueInput
    create: XOR<ConsultationCreateWithoutPatientInput, ConsultationUncheckedCreateWithoutPatientInput>
  }

  export type ConsultationCreateManyPatientInputEnvelope = {
    data: ConsultationCreateManyPatientInput | ConsultationCreateManyPatientInput[]
  }

  export type CompteCreateWithoutPatientInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteCreateNestedOneWithoutCompteInput
    notifications?: NotificationCreateNestedManyWithoutCompteInput
    messages?: MessageCreateNestedManyWithoutCompteInput
  }

  export type CompteUncheckedCreateWithoutPatientInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteUncheckedCreateNestedOneWithoutCompteInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompteInput
    messages?: MessageUncheckedCreateNestedManyWithoutCompteInput
  }

  export type CompteCreateOrConnectWithoutPatientInput = {
    where: CompteWhereUniqueInput
    create: XOR<CompteCreateWithoutPatientInput, CompteUncheckedCreateWithoutPatientInput>
  }

  export type ConsultationUpsertWithWhereUniqueWithoutPatientInput = {
    where: ConsultationWhereUniqueInput
    update: XOR<ConsultationUpdateWithoutPatientInput, ConsultationUncheckedUpdateWithoutPatientInput>
    create: XOR<ConsultationCreateWithoutPatientInput, ConsultationUncheckedCreateWithoutPatientInput>
  }

  export type ConsultationUpdateWithWhereUniqueWithoutPatientInput = {
    where: ConsultationWhereUniqueInput
    data: XOR<ConsultationUpdateWithoutPatientInput, ConsultationUncheckedUpdateWithoutPatientInput>
  }

  export type ConsultationUpdateManyWithWhereWithoutPatientInput = {
    where: ConsultationScalarWhereInput
    data: XOR<ConsultationUpdateManyMutationInput, ConsultationUncheckedUpdateManyWithoutPatientInput>
  }

  export type CompteUpsertWithoutPatientInput = {
    update: XOR<CompteUpdateWithoutPatientInput, CompteUncheckedUpdateWithoutPatientInput>
    create: XOR<CompteCreateWithoutPatientInput, CompteUncheckedCreateWithoutPatientInput>
    where?: CompteWhereInput
  }

  export type CompteUpdateToOneWithWhereWithoutPatientInput = {
    where?: CompteWhereInput
    data: XOR<CompteUpdateWithoutPatientInput, CompteUncheckedUpdateWithoutPatientInput>
  }

  export type CompteUpdateWithoutPatientInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUpdateManyWithoutCompteNestedInput
    messages?: MessageUpdateManyWithoutCompteNestedInput
  }

  export type CompteUncheckedUpdateWithoutPatientInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUncheckedUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompteNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCompteNestedInput
  }

  export type DentisteCreateWithoutCompteInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    consultations?: ConsultationCreateNestedManyWithoutDentisteInput
    planifications?: PlanificationCreateNestedManyWithoutDentisteInput
  }

  export type DentisteUncheckedCreateWithoutCompteInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDentisteInput
    planifications?: PlanificationUncheckedCreateNestedManyWithoutDentisteInput
  }

  export type DentisteCreateOrConnectWithoutCompteInput = {
    where: DentisteWhereUniqueInput
    create: XOR<DentisteCreateWithoutCompteInput, DentisteUncheckedCreateWithoutCompteInput>
  }

  export type PatientCreateWithoutCompteInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    consultations?: ConsultationCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCompteInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCompteInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCompteInput, PatientUncheckedCreateWithoutCompteInput>
  }

  export type NotificationCreateWithoutCompteInput = {
    id_notification?: string
    contenu_notification: string
    date_notification: Date | string
  }

  export type NotificationUncheckedCreateWithoutCompteInput = {
    id_notification?: string
    contenu_notification: string
    date_notification: Date | string
  }

  export type NotificationCreateOrConnectWithoutCompteInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCompteInput, NotificationUncheckedCreateWithoutCompteInput>
  }

  export type NotificationCreateManyCompteInputEnvelope = {
    data: NotificationCreateManyCompteInput | NotificationCreateManyCompteInput[]
  }

  export type MessageCreateWithoutCompteInput = {
    id_message?: string
    contenu_message: string
    date_message: Date | string
  }

  export type MessageUncheckedCreateWithoutCompteInput = {
    id_message?: string
    contenu_message: string
    date_message: Date | string
  }

  export type MessageCreateOrConnectWithoutCompteInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutCompteInput, MessageUncheckedCreateWithoutCompteInput>
  }

  export type MessageCreateManyCompteInputEnvelope = {
    data: MessageCreateManyCompteInput | MessageCreateManyCompteInput[]
  }

  export type DentisteUpsertWithoutCompteInput = {
    update: XOR<DentisteUpdateWithoutCompteInput, DentisteUncheckedUpdateWithoutCompteInput>
    create: XOR<DentisteCreateWithoutCompteInput, DentisteUncheckedCreateWithoutCompteInput>
    where?: DentisteWhereInput
  }

  export type DentisteUpdateToOneWithWhereWithoutCompteInput = {
    where?: DentisteWhereInput
    data: XOR<DentisteUpdateWithoutCompteInput, DentisteUncheckedUpdateWithoutCompteInput>
  }

  export type DentisteUpdateWithoutCompteInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUpdateManyWithoutDentisteNestedInput
    planifications?: PlanificationUpdateManyWithoutDentisteNestedInput
  }

  export type DentisteUncheckedUpdateWithoutCompteInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUncheckedUpdateManyWithoutDentisteNestedInput
    planifications?: PlanificationUncheckedUpdateManyWithoutDentisteNestedInput
  }

  export type PatientUpsertWithoutCompteInput = {
    update: XOR<PatientUpdateWithoutCompteInput, PatientUncheckedUpdateWithoutCompteInput>
    create: XOR<PatientCreateWithoutCompteInput, PatientUncheckedCreateWithoutCompteInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutCompteInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutCompteInput, PatientUncheckedUpdateWithoutCompteInput>
  }

  export type PatientUpdateWithoutCompteInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCompteInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    consultations?: ConsultationUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutCompteInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCompteInput, NotificationUncheckedUpdateWithoutCompteInput>
    create: XOR<NotificationCreateWithoutCompteInput, NotificationUncheckedCreateWithoutCompteInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCompteInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCompteInput, NotificationUncheckedUpdateWithoutCompteInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCompteInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCompteInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id_notification?: StringFilter<"Notification"> | string
    contenu_notification?: StringFilter<"Notification"> | string
    date_notification?: DateTimeFilter<"Notification"> | Date | string
    id_compte?: StringNullableFilter<"Notification"> | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutCompteInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutCompteInput, MessageUncheckedUpdateWithoutCompteInput>
    create: XOR<MessageCreateWithoutCompteInput, MessageUncheckedCreateWithoutCompteInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutCompteInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutCompteInput, MessageUncheckedUpdateWithoutCompteInput>
  }

  export type MessageUpdateManyWithWhereWithoutCompteInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutCompteInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id_message?: StringFilter<"Message"> | string
    contenu_message?: StringFilter<"Message"> | string
    date_message?: DateTimeFilter<"Message"> | Date | string
    id_compte?: StringNullableFilter<"Message"> | string | null
  }

  export type CompteCreateWithoutMessagesInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteCreateNestedOneWithoutCompteInput
    patient?: PatientCreateNestedOneWithoutCompteInput
    notifications?: NotificationCreateNestedManyWithoutCompteInput
  }

  export type CompteUncheckedCreateWithoutMessagesInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteUncheckedCreateNestedOneWithoutCompteInput
    patient?: PatientUncheckedCreateNestedOneWithoutCompteInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompteInput
  }

  export type CompteCreateOrConnectWithoutMessagesInput = {
    where: CompteWhereUniqueInput
    create: XOR<CompteCreateWithoutMessagesInput, CompteUncheckedCreateWithoutMessagesInput>
  }

  export type CompteUpsertWithoutMessagesInput = {
    update: XOR<CompteUpdateWithoutMessagesInput, CompteUncheckedUpdateWithoutMessagesInput>
    create: XOR<CompteCreateWithoutMessagesInput, CompteUncheckedCreateWithoutMessagesInput>
    where?: CompteWhereInput
  }

  export type CompteUpdateToOneWithWhereWithoutMessagesInput = {
    where?: CompteWhereInput
    data: XOR<CompteUpdateWithoutMessagesInput, CompteUncheckedUpdateWithoutMessagesInput>
  }

  export type CompteUpdateWithoutMessagesInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUpdateOneWithoutCompteNestedInput
    patient?: PatientUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUpdateManyWithoutCompteNestedInput
  }

  export type CompteUncheckedUpdateWithoutMessagesInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUncheckedUpdateOneWithoutCompteNestedInput
    patient?: PatientUncheckedUpdateOneWithoutCompteNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompteNestedInput
  }

  export type CompteCreateWithoutNotificationsInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteCreateNestedOneWithoutCompteInput
    patient?: PatientCreateNestedOneWithoutCompteInput
    messages?: MessageCreateNestedManyWithoutCompteInput
  }

  export type CompteUncheckedCreateWithoutNotificationsInput = {
    id_compte?: string
    nom_utilisateur: string
    email: string
    clerkId?: string | null
    role?: $Enums.Role | null
    dentiste?: DentisteUncheckedCreateNestedOneWithoutCompteInput
    patient?: PatientUncheckedCreateNestedOneWithoutCompteInput
    messages?: MessageUncheckedCreateNestedManyWithoutCompteInput
  }

  export type CompteCreateOrConnectWithoutNotificationsInput = {
    where: CompteWhereUniqueInput
    create: XOR<CompteCreateWithoutNotificationsInput, CompteUncheckedCreateWithoutNotificationsInput>
  }

  export type CompteUpsertWithoutNotificationsInput = {
    update: XOR<CompteUpdateWithoutNotificationsInput, CompteUncheckedUpdateWithoutNotificationsInput>
    create: XOR<CompteCreateWithoutNotificationsInput, CompteUncheckedCreateWithoutNotificationsInput>
    where?: CompteWhereInput
  }

  export type CompteUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: CompteWhereInput
    data: XOR<CompteUpdateWithoutNotificationsInput, CompteUncheckedUpdateWithoutNotificationsInput>
  }

  export type CompteUpdateWithoutNotificationsInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUpdateOneWithoutCompteNestedInput
    patient?: PatientUpdateOneWithoutCompteNestedInput
    messages?: MessageUpdateManyWithoutCompteNestedInput
  }

  export type CompteUncheckedUpdateWithoutNotificationsInput = {
    nom_utilisateur?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    dentiste?: DentisteUncheckedUpdateOneWithoutCompteNestedInput
    patient?: PatientUncheckedUpdateOneWithoutCompteNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCompteNestedInput
  }

  export type DentisteCreateWithoutConsultationsInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    planifications?: PlanificationCreateNestedManyWithoutDentisteInput
    compte?: CompteCreateNestedOneWithoutDentisteInput
  }

  export type DentisteUncheckedCreateWithoutConsultationsInput = {
    id_dentiste?: string
    nom_dentiste: string
    prenom_dentiste: string
    telephone: string
    email: string
    id_compte?: string | null
    planifications?: PlanificationUncheckedCreateNestedManyWithoutDentisteInput
  }

  export type DentisteCreateOrConnectWithoutConsultationsInput = {
    where: DentisteWhereUniqueInput
    create: XOR<DentisteCreateWithoutConsultationsInput, DentisteUncheckedCreateWithoutConsultationsInput>
  }

  export type PatientCreateWithoutConsultationsInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    compte?: CompteCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutConsultationsInput = {
    id_patient?: string
    nom_patient: string
    prenom_patient: string
    age: number
    quartier: string
    telephone: string
    compte_email?: string | null
  }

  export type PatientCreateOrConnectWithoutConsultationsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutConsultationsInput, PatientUncheckedCreateWithoutConsultationsInput>
  }

  export type DentisteUpsertWithoutConsultationsInput = {
    update: XOR<DentisteUpdateWithoutConsultationsInput, DentisteUncheckedUpdateWithoutConsultationsInput>
    create: XOR<DentisteCreateWithoutConsultationsInput, DentisteUncheckedCreateWithoutConsultationsInput>
    where?: DentisteWhereInput
  }

  export type DentisteUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: DentisteWhereInput
    data: XOR<DentisteUpdateWithoutConsultationsInput, DentisteUncheckedUpdateWithoutConsultationsInput>
  }

  export type DentisteUpdateWithoutConsultationsInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    planifications?: PlanificationUpdateManyWithoutDentisteNestedInput
    compte?: CompteUpdateOneWithoutDentisteNestedInput
  }

  export type DentisteUncheckedUpdateWithoutConsultationsInput = {
    nom_dentiste?: StringFieldUpdateOperationsInput | string
    prenom_dentiste?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    id_compte?: NullableStringFieldUpdateOperationsInput | string | null
    planifications?: PlanificationUncheckedUpdateManyWithoutDentisteNestedInput
  }

  export type PatientUpsertWithoutConsultationsInput = {
    update: XOR<PatientUpdateWithoutConsultationsInput, PatientUncheckedUpdateWithoutConsultationsInput>
    create: XOR<PatientCreateWithoutConsultationsInput, PatientUncheckedCreateWithoutConsultationsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutConsultationsInput, PatientUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientUpdateWithoutConsultationsInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    compte?: CompteUpdateOneWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutConsultationsInput = {
    nom_patient?: StringFieldUpdateOperationsInput | string
    prenom_patient?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    quartier?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    compte_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsultationCreateManyDentisteInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    id_patient?: string | null
  }

  export type PlanificationCreateManyDentisteInput = {
    id_planification?: string
    date_service: Date | string
    heures_debut: string
    heures_fin: string
  }

  export type ConsultationUpdateWithoutDentisteInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    patient?: PatientUpdateOneWithoutConsultationsNestedInput
  }

  export type ConsultationUncheckedUpdateWithoutDentisteInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_patient?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsultationUncheckedUpdateManyWithoutDentisteInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_patient?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanificationUpdateWithoutDentisteInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
  }

  export type PlanificationUncheckedUpdateWithoutDentisteInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
  }

  export type PlanificationUncheckedUpdateManyWithoutDentisteInput = {
    date_service?: DateTimeFieldUpdateOperationsInput | Date | string
    heures_debut?: StringFieldUpdateOperationsInput | string
    heures_fin?: StringFieldUpdateOperationsInput | string
  }

  export type ConsultationCreateManyPatientInput = {
    id_consultation?: string
    date_consultation: Date | string
    motif: string
    status: string
    id_dentiste?: string | null
  }

  export type ConsultationUpdateWithoutPatientInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dentiste?: DentisteUpdateOneWithoutConsultationsNestedInput
  }

  export type ConsultationUncheckedUpdateWithoutPatientInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_dentiste?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsultationUncheckedUpdateManyWithoutPatientInput = {
    date_consultation?: DateTimeFieldUpdateOperationsInput | Date | string
    motif?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_dentiste?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateManyCompteInput = {
    id_notification?: string
    contenu_notification: string
    date_notification: Date | string
  }

  export type MessageCreateManyCompteInput = {
    id_message?: string
    contenu_message: string
    date_message: Date | string
  }

  export type NotificationUpdateWithoutCompteInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutCompteInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutCompteInput = {
    contenu_notification?: StringFieldUpdateOperationsInput | string
    date_notification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutCompteInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateWithoutCompteInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutCompteInput = {
    contenu_message?: StringFieldUpdateOperationsInput | string
    date_message?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DentisteCountOutputTypeDefaultArgs instead
     */
    export type DentisteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DentisteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompteCountOutputTypeDefaultArgs instead
     */
    export type CompteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanificationDefaultArgs instead
     */
    export type PlanificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DentisteDefaultArgs instead
     */
    export type DentisteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DentisteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompteDefaultArgs instead
     */
    export type CompteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsultationDefaultArgs instead
     */
    export type ConsultationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsultationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}